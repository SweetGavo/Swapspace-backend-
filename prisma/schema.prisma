// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}




datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("")
}

enum PROPERTY_TYPES {
  commercial_Villa
  offices
  shops
  apartment
  villa
  town_House
  pent_House
  select
  Apartment_Hotel
  apartment_Residential
  warehouse
  showroom
  bulk_Unit
  commercial_Floor
  residential_Floor
  land
}

enum Specalty_Type {
  Property_Investment
  Property_Contractor
  Leasing_Executive
  Realtor
  Property_Consultant
  Real_Estate_Consultant
  Property_Manager
  Real_Estate_Agent
  Sales_Leasing_Agent
  Other
  Selecte
}

enum Status_type {
  PENDING
  APPROVED
  REJECTED
}
   

   
enum Type {
  USER
  AGENT
  ADMIN
}

enum Agent_type {
  REALTOR
  CO_REALTOR
}

model User {
  id                 String     @id @unique @default(uuid())
  email              String     @unique
  number             String     @unique
  password           String
  profile            Profile?
  otp                Otp[]      @relation("Otpproperties")
  type               Type  @default(USER)
  createdAt          DateTime   @default(now())
  date_modified      DateTime   @default(now()) @updatedAt
  verifiedEmail      Boolean    @default(false)
  verifiedNumber     Boolean    @default(false)
  realtor            Realtor?
  realtorId          String?    @unique
  ratingsGiven       Rating[]
  favoriteProperties Favorite[] @relation("favorites")
}

model Profile {
  id            String   @id @unique @default(uuid())
  fullname      String
  address       String
  image         String
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  date_modified DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Realtor {
  id                  String       @id @unique @default(uuid())
  company_name        String
  address             String
  broker_BRN          String
  agent_ORN           String
  years_of_experience String
  specialty           String[]
  role                Agent_type
  language            String[]
  description         String
  license_number      String       @unique
  broker_card_image   String[]
  image               String
  status              Status_type  @default(PENDING)
  user                User?        @relation(fields: [userId], references: [id])
  teams               Team[]       @relation("RealtorGroups")
  userId              String?      @unique
  properties          Property[]   @relation("RealtorProperties")
  offers              Offers[]
  createdAt           DateTime     @default(now())
  date_modified       DateTime     @default(now()) @updatedAt
  ratingsReceived     Rating[]
  task                Task[]       @relation("Tasks")
  teamTasks           TeamTask[]   @relation("TeamTasks")
  info                Info[]       @relation("Info")
  invites             Invitation[] @relation("Invitation")
}

model Otp {
  id            String   @id @unique @default(uuid())
  userId        String   @unique
  user          User?    @relation("Otpproperties", fields: [userId], references: [id])
  otp           String
  createdAt     DateTime @default(now())
  otp_expiry    DateTime @default(now())
  date_modified DateTime @default(now()) @updatedAt

  @@index([userId])
}

enum Availablity_Type {
  Available
  Unavailable
  Sold
}

enum Property_Status {
  Reviwing
  Live
  Declined
}

model Property {
  id                                  String           @id @unique @default(uuid())
  property_title                      String
  property_type                       PROPERTY_TYPES
  structure                           String
  listing_type                        String
  style                               String
  view                                String
  utility_payment                     String
  year_built                          String
  pets_allowed                        String
  available                           String
  sale_or_rent_price                  String
  price_prefix                        String
  payment_frequency                   String
  payment_plan                        String
  langitude                           Float
  latitude                            Float
  country                             String
  street_Number                       String
  locality                            String
  postal_code                         String
  logistics                           String
  parking_lot                         String
  parking_slots                       String
  fire_place                          String
  entry_floor                         String
  room_list                           String
  bedroom                             String
  bathroom                            String
  pool                                String
  building_unit                       String
  unit_amenities                      String[]
  specification                       String
  images                              String[]
  video_url                           String
  video_url_tour                      String
  utilities                           String[]
  date_posted                         String
  property_price                      String
  total_lessee                        String
  renovation                          String?
  permit                              String
  description                         String
  additional_details                  String
  additional_facilities_and_amenities String
  proximate_landmark                  String
  availablity                         Availablity_Type @default(Available)
  status                              Property_Status  @default(Reviwing)
  realtor                             Realtor?         @relation("RealtorProperties", fields: [realtorId], references: [id])
  offers                              Offers[]
  view_count                          Int              @default(0)
  view_by_user                        String[]
  realtorId                           String?
  createdAt                           DateTime         @default(now())
  date_modified                       DateTime         @default(now()) @updatedAt
  favoriteProperties                  Favorite[]       @relation("favorites")
}

model Team {
  id            String      @id @unique @default(uuid())
  name          String
  realtorId     String
  status        String      @default("CREATOR")
  members       CoRealtor[] @relation("GroupMembers")
  createdBy     Realtor     @relation("RealtorGroups", fields: [realtorId], references: [id])
  createdAt     DateTime    @default(now())
  date_modified DateTime    @default(now()) @updatedAt
  infos         Info[]      @relation("InfoTeams")
}

model Rating {
  id        String   @id @unique @default(uuid())
  value     Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  realtorId String
  realtor   Realtor  @relation(fields: [realtorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProgressStatus {
  Inquiry
  Negotiation
  Acceptance
  Payment
  Sold
}

model Offers {
  id             String         @id @unique @default(uuid())
  propertyId     String
  realtorId      String
  realtor        Realtor        @relation(fields: [realtorId], references: [id])
  listingId      String?
  client_name    String
  property_title String
  property_type  String
  listing_type   String
  amount         Float
  progress       ProgressStatus
  date           DateTime
  time           DateTime
  property       Property       @relation(fields: [propertyId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

enum Completed_Type {
  PENDING
  COMPLETED
  OVERDUE
}

enum Action_Type {
  CALL
  EMAIL
  MESSAGE
  DEAL
  OTHERS
}

enum CoRealtorId {
  CO_REALTOR_1
  CO_REALTOR_2
  NONE
}

enum TYPE {
  Personal
  Team
}

// this task is for Individula task or Personal task 
model Task {
  id String @id @unique @default(uuid())

  title           String
  action          Action_Type
  coRealtorId     String?
  coRealtor       CoRealtor?     @relation("Tasks", fields: [coRealtorId], references: [id])
  number_of_deals Int
  contact         String[]
  description     String
  start_date      DateTime
  due_date        DateTime
  due_time        DateTime
  closing_date    DateTime
  closing_time    DateTime
  completed       Completed_Type @default(PENDING)
  responses       Response[]     @relation("TaskResponses")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  realtorId       String?
  realtor         Realtor?       @relation("Tasks", fields: [realtorId], references: [id])
  assignee        CoRealtor?     @relation("AssigneeTasks", fields: [assigneeId], references: [id])
  collaborator    CoRealtor?     @relation("CollaboratorTasks", fields: [collaboratorId], references: [id])
  assigneeId      String?
  collaboratorId  String?
}

model Response {
  id        String   @id @unique @default(uuid())
  outcome   String
  contacts  String
  note      String
  amount    Float
  taskId    String
  task      Task?    @relation("TaskResponses", fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoRealtor {
  id                String   @id @unique @default(uuid())
  full_name         String
  email             String   @unique
  number            String
  password          String
  type              String   @default("CO_REALTOR")
  token             String?  @unique
  image             String
  groups            Team[]   @relation("GroupMembers")
  tasks             Task[]   @relation("Tasks")
  assignedTasks     Task[]   @relation("AssigneeTasks")
  collaboratedTasks Task[]   @relation("CollaboratorTasks")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Invitation {
  id        String   @id @unique @default(uuid())
  email     String   @unique
  realtor   Realtor? @relation("Invitation", fields: [realtorId], references: [id])
  realtorId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String   @id @unique @default(uuid())
  email     String
  password  String
  type      String   @default("ADMIN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PAYMENT_PLAN {
  two_Term_Installments
  one_Term_Payment
  three_Term_Payment
}

enum SPECIFICATION {
  funished
  unfunished
  none
}

enum RENT {
  sale
  short_let
}

enum STRUCTURE {
  commercial
  residential
}

enum APPLAINCES {
  washing_machine
  vacuum_cleaner
  microwave
  refrigerator
  air_conditioner
  kitchen_hood
  gas_cooker
  dish_washer
  oven
  blender
  cloth_dryer
  television
  light_bulb
  lamp
}

enum CATEGORY {
  betes_and_bounds
  lots_and_blocks
  modern
  ultra_modern
  luxury
}

enum AMENITIES {
  swimming_pool
  fitnes_facilities
  park_areas
  apa
  healt_club
  co_working_areas
  sport_and_leisure
  gardens
  movies
  lobby
  kids_play_area
}

enum EMIRATE {
  abu_dhabi
  dubai
  sharja
  ajman
  ummu_al_quwain
  ras_al_khaimah
  fujairah
}

enum PROXIMITY {
  school
  hospital
  salon
  gas_station
  airport
  pharmacy
  super_maket
  eats_and_chill
  bank
}

enum View {
  loft
  upper_crest
  fountain_view
  classic_villa
  modern_villa
  black_rock
}

enum PET {
  cat
  dog
  none
}

enum STYLE {
  arabic_villa
  palm_jumeirah
  modern_mansion
  classic_villa
  modern_villa
  black_rock
}

model PropertyForm {
  id                 String         @id @unique @default(uuid())
  property_title     String
  description        String
  rent               RENT
  property_type      PROPERTY_TYPES
  structure          STRUCTURE
  sale_or_rent_price String
  price_prefix       String
  payment_frequency  String
  payment_plan       PAYMENT_PLAN
  images             String[]
  video_url          String
  video_url_tour     String
  bedroom            String
  bathroom           String
  area_size          String
  size_postfix       String
  fire_place         String
  entry_floor        String
  parking_slot       String
  parking_lot        String
  year_built         String
  building_unit      String
  available          String
  renovation         String
  appliance          APPLAINCES
  category           CATEGORY
  amenities          AMENITIES
  additional_details String?
  location           String
  emirate            EMIRATE
  proximity          PROXIMITY
  street_Number      String
  locality           String
  postal_code        String
  style              STYLE
  view               View
  pet                PET
  specification      SPECIFICATION
  floor_plan         String
  property_document  String[]
  total_lessee       String
  price              String
  message            String
  realtorId          String?
  userId             String
}

model TeamTask {
  id         String         @id @unique @default(uuid())
  title      String
  note       String?
  clue       String
  break_down String[]
  teamId     String[]
  contact    String?
  due_date   String
  due_time   String
  realtor    Realtor        @relation("TeamTasks", fields: [realtorId], references: [id])
  realtorId  String
  status     Completed_Type @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model Info {
  id         String   @id @unique @default(uuid())
  title      String
  event      String
  event_link String
  date       DateTime
  time       DateTime
  teamId     String[]
  teams      Team[]   @relation("InfoTeams")
  realtor    Realtor  @relation("Info", fields: [realtorId], references: [id])
  realtorId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Favorite {
  id         String   @id @default(uuid())
  user       User[]   @relation("favorites")
  property   Property @relation("favorites", fields: [propertyId], references: [id])
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Feedback {
  id              String         @id @unique @default(uuid())
  userId          String
  nature          FEEDBACKNATURE
  contact_email   String
  contact_phone   String
  feedback_string String
  attachments     Json[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum FEEDBACKNATURE {
  SUGGESTION
  COMPLAINT
  OTHER
}

model ROC {
  id             String   @id @unique @default(uuid())
  property_price Float
  commissiom     Float
  split          Int
  gain           Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
