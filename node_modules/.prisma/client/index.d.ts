
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string
  number: string
  password: string
  type: List_Types
  createdAt: Date
  date_modified: Date
  verifiedEmail: boolean
  verifiedNumber: boolean
  realtorId: string | null
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  id: string
  fullname: string
  address: string
  image: string
  userId: string
  createdAt: Date
  date_modified: Date
}

/**
 * Model Realtor
 * 
 */
export type Realtor = {
  id: string
  compant_name: string
  address: string
  broker_BRN: string
  agent_ORN: string
  years_of_experience: string
  specialty: string[]
  role: Agent_type
  language: string[]
  description: string
  license_number: string
  broker_card_image: string[]
  image: string
  status: Status_type
  userId: string | null
  createdAt: Date
  date_modified: Date
}

/**
 * Model Otp
 * 
 */
export type Otp = {
  id: string
  userId: string
  otp: string
  createdAt: Date
  otp_expiry: Date
  date_modified: Date
}

/**
 * Model Property
 * 
 */
export type Property = {
  id: string
  property_title: string
  property_type: PROPERTY_TYPES
  structure: string
  listing_type: string
  style: string
  view: string
  utility_payment: string
  year_built: string
  pets_allowed: string
  available: string
  sale_or_rent_price: string
  price_prefix: string
  payment_frequency: string
  payment_plan: string
  langitude: number
  latitude: number
  country: string
  street_Number: string
  locality: string
  postal_code: string
  logistics: string
  parking_lot: string
  parking_slots: string
  fire_place: string
  entry_floor: string
  room_list: string
  bedroom: string
  bathroom: string
  pool: string
  building_unit: string
  unit_amenities: string[]
  specification: string
  images: string[]
  video_url: string
  video_url_tour: string
  utilities: string[]
  date_posted: string
  property_price: string
  total_lessee: string
  permit: string
  description: string
  additional_details: string
  additional_facilities_and_amenities: string
  proximate_landmark: string
  realtorId: string | null
  createdAt: Date
  date_modified: Date
}

/**
 * Model Group
 * 
 */
export type Group = {
  id: string
  name: string
  realtorId: string
  status: string
  createdAt: Date
  date_modified: Date
}

/**
 * Model Rating
 * 
 */
export type Rating = {
  id: string
  value: number
  comment: string
  userId: string
  realtorId: string
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Agent_type: {
  REALTOR: 'REALTOR',
  CO_REALTOR: 'CO_REALTOR'
};

export type Agent_type = (typeof Agent_type)[keyof typeof Agent_type]


export const List_Types: {
  USER: 'USER',
  AGENT: 'AGENT',
  ADMIN: 'ADMIN'
};

export type List_Types = (typeof List_Types)[keyof typeof List_Types]


export const PROPERTY_TYPES: {
  commercial_Villa: 'commercial_Villa',
  offices: 'offices',
  shops: 'shops',
  apartment: 'apartment',
  villa: 'villa',
  town_House: 'town_House',
  pent_House: 'pent_House',
  select: 'select',
  Apartment_Hotel: 'Apartment_Hotel',
  apartment_Residential: 'apartment_Residential',
  warehouse: 'warehouse',
  showroom: 'showroom',
  bulk_Unit: 'bulk_Unit',
  commercial_Floor: 'commercial_Floor',
  residential_Floor: 'residential_Floor',
  land: 'land'
};

export type PROPERTY_TYPES = (typeof PROPERTY_TYPES)[keyof typeof PROPERTY_TYPES]


export const Status_type: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

export type Status_type = (typeof Status_type)[keyof typeof Status_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.realtor`: Exposes CRUD operations for the **Realtor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Realtors
    * const realtors = await prisma.realtor.findMany()
    * ```
    */
  get realtor(): Prisma.RealtorDelegate<GlobalReject>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **Otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.OtpDelegate<GlobalReject>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<GlobalReject>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<GlobalReject>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.1
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Realtor: 'Realtor',
    Otp: 'Otp',
    Property: 'Property',
    Group: 'Group',
    Rating: 'Rating'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    otp: number
    ratingsGiven: number
  }

  export type UserCountOutputTypeSelect = {
    otp?: boolean
    ratingsGiven?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RealtorCountOutputType
   */


  export type RealtorCountOutputType = {
    groups: number
    properties: number
    ratingsReceived: number
  }

  export type RealtorCountOutputTypeSelect = {
    groups?: boolean
    properties?: boolean
    ratingsReceived?: boolean
  }

  export type RealtorCountOutputTypeGetPayload<S extends boolean | null | undefined | RealtorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RealtorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RealtorCountOutputTypeArgs)
    ? RealtorCountOutputType 
    : S extends { select: any } & (RealtorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RealtorCountOutputType ? RealtorCountOutputType[P] : never
  } 
      : RealtorCountOutputType




  // Custom InputTypes

  /**
   * RealtorCountOutputType without action
   */
  export type RealtorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RealtorCountOutputType
     */
    select?: RealtorCountOutputTypeSelect | null
  }



  /**
   * Count Type GroupCountOutputType
   */


  export type GroupCountOutputType = {
    members: number
  }

  export type GroupCountOutputTypeSelect = {
    members?: boolean
  }

  export type GroupCountOutputTypeGetPayload<S extends boolean | null | undefined | GroupCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GroupCountOutputTypeArgs)
    ? GroupCountOutputType 
    : S extends { select: any } & (GroupCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GroupCountOutputType ? GroupCountOutputType[P] : never
  } 
      : GroupCountOutputType




  // Custom InputTypes

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    number: string | null
    password: string | null
    type: List_Types | null
    createdAt: Date | null
    date_modified: Date | null
    verifiedEmail: boolean | null
    verifiedNumber: boolean | null
    realtorId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    number: string | null
    password: string | null
    type: List_Types | null
    createdAt: Date | null
    date_modified: Date | null
    verifiedEmail: boolean | null
    verifiedNumber: boolean | null
    realtorId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    number: number
    password: number
    type: number
    createdAt: number
    date_modified: number
    verifiedEmail: number
    verifiedNumber: number
    realtorId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    number?: true
    password?: true
    type?: true
    createdAt?: true
    date_modified?: true
    verifiedEmail?: true
    verifiedNumber?: true
    realtorId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    number?: true
    password?: true
    type?: true
    createdAt?: true
    date_modified?: true
    verifiedEmail?: true
    verifiedNumber?: true
    realtorId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    number?: true
    password?: true
    type?: true
    createdAt?: true
    date_modified?: true
    verifiedEmail?: true
    verifiedNumber?: true
    realtorId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string
    number: string
    password: string
    type: List_Types
    createdAt: Date
    date_modified: Date
    verifiedEmail: boolean
    verifiedNumber: boolean
    realtorId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    number?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    date_modified?: boolean
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: boolean
    profile?: boolean | ProfileArgs
    otp?: boolean | User$otpArgs
    realtor?: boolean | RealtorArgs
    ratingsGiven?: boolean | User$ratingsGivenArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    profile?: boolean | ProfileArgs
    otp?: boolean | User$otpArgs
    realtor?: boolean | RealtorArgs
    ratingsGiven?: boolean | User$ratingsGivenArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'otp' ? Array < OtpGetPayload<S['include'][P]>>  :
        P extends 'realtor' ? RealtorGetPayload<S['include'][P]> | null :
        P extends 'ratingsGiven' ? Array < RatingGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'otp' ? Array < OtpGetPayload<S['select'][P]>>  :
        P extends 'realtor' ? RealtorGetPayload<S['select'][P]> | null :
        P extends 'ratingsGiven' ? Array < RatingGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    profile<T extends ProfileArgs= {}>(args?: Subset<T, ProfileArgs>): Prisma__ProfileClient<ProfileGetPayload<T> | Null>;

    otp<T extends User$otpArgs= {}>(args?: Subset<T, User$otpArgs>): Prisma.PrismaPromise<Array<OtpGetPayload<T>>| Null>;

    realtor<T extends RealtorArgs= {}>(args?: Subset<T, RealtorArgs>): Prisma__RealtorClient<RealtorGetPayload<T> | Null>;

    ratingsGiven<T extends User$ratingsGivenArgs= {}>(args?: Subset<T, User$ratingsGivenArgs>): Prisma.PrismaPromise<Array<RatingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.otp
   */
  export type User$otpArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    where?: OtpWhereInput
    orderBy?: Enumerable<OtpOrderByWithRelationInput>
    cursor?: OtpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OtpScalarFieldEnum>
  }


  /**
   * User.ratingsGiven
   */
  export type User$ratingsGivenArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    fullname: string | null
    address: string | null
    image: string | null
    userId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    fullname: string | null
    address: string | null
    image: string | null
    userId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    fullname: number
    address: number
    image: number
    userId: number
    createdAt: number
    date_modified: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    fullname?: true
    address?: true
    image?: true
    userId?: true
    createdAt?: true
    date_modified?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    fullname?: true
    address?: true
    image?: true
    userId?: true
    createdAt?: true
    date_modified?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    fullname?: true
    address?: true
    image?: true
    userId?: true
    createdAt?: true
    date_modified?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: ProfileScalarFieldEnum[]
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    id: string
    fullname: string
    address: string
    image: string
    userId: string
    createdAt: Date
    date_modified: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    id?: boolean
    fullname?: boolean
    address?: boolean
    image?: boolean
    userId?: boolean
    createdAt?: boolean
    date_modified?: boolean
    user?: boolean | UserArgs
  }


  export type ProfileInclude = {
    user?: boolean | UserArgs
  }

  export type ProfileGetPayload<S extends boolean | null | undefined | ProfileArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Profile :
    S extends undefined ? never :
    S extends { include: any } & (ProfileArgs | ProfileFindManyArgs)
    ? Profile  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ProfileArgs | ProfileFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
      : Profile


  type ProfileCountArgs = 
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find one Profile that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindUniqueOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? Prisma__ProfileClient<ProfileGetPayload<T>> : Prisma__ProfileClient<ProfileGetPayload<T> | null, null>

    /**
     * Find the first Profile that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProfileFindFirstOrThrowArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): Prisma.PrismaPromise<Array<ProfileGetPayload<T>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): Prisma__ProfileClient<ProfileGetPayload<T>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Profile base type for findUnique actions
   */
  export type ProfileFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUnique
   */
  export interface ProfileFindUniqueArgs extends ProfileFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile base type for findFirst actions
   */
  export type ProfileFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }

  /**
   * Profile findFirst
   */
  export interface ProfileFindFirstArgs extends ProfileFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     */
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfileInclude | null
  }



  /**
   * Model Realtor
   */


  export type AggregateRealtor = {
    _count: RealtorCountAggregateOutputType | null
    _min: RealtorMinAggregateOutputType | null
    _max: RealtorMaxAggregateOutputType | null
  }

  export type RealtorMinAggregateOutputType = {
    id: string | null
    compant_name: string | null
    address: string | null
    broker_BRN: string | null
    agent_ORN: string | null
    years_of_experience: string | null
    role: Agent_type | null
    description: string | null
    license_number: string | null
    image: string | null
    status: Status_type | null
    userId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type RealtorMaxAggregateOutputType = {
    id: string | null
    compant_name: string | null
    address: string | null
    broker_BRN: string | null
    agent_ORN: string | null
    years_of_experience: string | null
    role: Agent_type | null
    description: string | null
    license_number: string | null
    image: string | null
    status: Status_type | null
    userId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type RealtorCountAggregateOutputType = {
    id: number
    compant_name: number
    address: number
    broker_BRN: number
    agent_ORN: number
    years_of_experience: number
    specialty: number
    role: number
    language: number
    description: number
    license_number: number
    broker_card_image: number
    image: number
    status: number
    userId: number
    createdAt: number
    date_modified: number
    _all: number
  }


  export type RealtorMinAggregateInputType = {
    id?: true
    compant_name?: true
    address?: true
    broker_BRN?: true
    agent_ORN?: true
    years_of_experience?: true
    role?: true
    description?: true
    license_number?: true
    image?: true
    status?: true
    userId?: true
    createdAt?: true
    date_modified?: true
  }

  export type RealtorMaxAggregateInputType = {
    id?: true
    compant_name?: true
    address?: true
    broker_BRN?: true
    agent_ORN?: true
    years_of_experience?: true
    role?: true
    description?: true
    license_number?: true
    image?: true
    status?: true
    userId?: true
    createdAt?: true
    date_modified?: true
  }

  export type RealtorCountAggregateInputType = {
    id?: true
    compant_name?: true
    address?: true
    broker_BRN?: true
    agent_ORN?: true
    years_of_experience?: true
    specialty?: true
    role?: true
    language?: true
    description?: true
    license_number?: true
    broker_card_image?: true
    image?: true
    status?: true
    userId?: true
    createdAt?: true
    date_modified?: true
    _all?: true
  }

  export type RealtorAggregateArgs = {
    /**
     * Filter which Realtor to aggregate.
     */
    where?: RealtorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realtors to fetch.
     */
    orderBy?: Enumerable<RealtorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RealtorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realtors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realtors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Realtors
    **/
    _count?: true | RealtorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RealtorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RealtorMaxAggregateInputType
  }

  export type GetRealtorAggregateType<T extends RealtorAggregateArgs> = {
        [P in keyof T & keyof AggregateRealtor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRealtor[P]>
      : GetScalarType<T[P], AggregateRealtor[P]>
  }




  export type RealtorGroupByArgs = {
    where?: RealtorWhereInput
    orderBy?: Enumerable<RealtorOrderByWithAggregationInput>
    by: RealtorScalarFieldEnum[]
    having?: RealtorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RealtorCountAggregateInputType | true
    _min?: RealtorMinAggregateInputType
    _max?: RealtorMaxAggregateInputType
  }


  export type RealtorGroupByOutputType = {
    id: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty: string[]
    role: Agent_type
    language: string[]
    description: string
    license_number: string
    broker_card_image: string[]
    image: string
    status: Status_type
    userId: string | null
    createdAt: Date
    date_modified: Date
    _count: RealtorCountAggregateOutputType | null
    _min: RealtorMinAggregateOutputType | null
    _max: RealtorMaxAggregateOutputType | null
  }

  type GetRealtorGroupByPayload<T extends RealtorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RealtorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RealtorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RealtorGroupByOutputType[P]>
            : GetScalarType<T[P], RealtorGroupByOutputType[P]>
        }
      >
    >


  export type RealtorSelect = {
    id?: boolean
    compant_name?: boolean
    address?: boolean
    broker_BRN?: boolean
    agent_ORN?: boolean
    years_of_experience?: boolean
    specialty?: boolean
    role?: boolean
    language?: boolean
    description?: boolean
    license_number?: boolean
    broker_card_image?: boolean
    image?: boolean
    status?: boolean
    userId?: boolean
    createdAt?: boolean
    date_modified?: boolean
    user?: boolean | UserArgs
    groups?: boolean | Realtor$groupsArgs
    properties?: boolean | Realtor$propertiesArgs
    ratingsReceived?: boolean | Realtor$ratingsReceivedArgs
    _count?: boolean | RealtorCountOutputTypeArgs
  }


  export type RealtorInclude = {
    user?: boolean | UserArgs
    groups?: boolean | Realtor$groupsArgs
    properties?: boolean | Realtor$propertiesArgs
    ratingsReceived?: boolean | Realtor$ratingsReceivedArgs
    _count?: boolean | RealtorCountOutputTypeArgs
  }

  export type RealtorGetPayload<S extends boolean | null | undefined | RealtorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Realtor :
    S extends undefined ? never :
    S extends { include: any } & (RealtorArgs | RealtorFindManyArgs)
    ? Realtor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :
        P extends 'groups' ? Array < GroupGetPayload<S['include'][P]>>  :
        P extends 'properties' ? Array < PropertyGetPayload<S['include'][P]>>  :
        P extends 'ratingsReceived' ? Array < RatingGetPayload<S['include'][P]>>  :
        P extends '_count' ? RealtorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RealtorArgs | RealtorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :
        P extends 'groups' ? Array < GroupGetPayload<S['select'][P]>>  :
        P extends 'properties' ? Array < PropertyGetPayload<S['select'][P]>>  :
        P extends 'ratingsReceived' ? Array < RatingGetPayload<S['select'][P]>>  :
        P extends '_count' ? RealtorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Realtor ? Realtor[P] : never
  } 
      : Realtor


  type RealtorCountArgs = 
    Omit<RealtorFindManyArgs, 'select' | 'include'> & {
      select?: RealtorCountAggregateInputType | true
    }

  export interface RealtorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Realtor that matches the filter.
     * @param {RealtorFindUniqueArgs} args - Arguments to find a Realtor
     * @example
     * // Get one Realtor
     * const realtor = await prisma.realtor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RealtorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RealtorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Realtor'> extends True ? Prisma__RealtorClient<RealtorGetPayload<T>> : Prisma__RealtorClient<RealtorGetPayload<T> | null, null>

    /**
     * Find one Realtor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RealtorFindUniqueOrThrowArgs} args - Arguments to find a Realtor
     * @example
     * // Get one Realtor
     * const realtor = await prisma.realtor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RealtorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RealtorFindUniqueOrThrowArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Find the first Realtor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorFindFirstArgs} args - Arguments to find a Realtor
     * @example
     * // Get one Realtor
     * const realtor = await prisma.realtor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RealtorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RealtorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Realtor'> extends True ? Prisma__RealtorClient<RealtorGetPayload<T>> : Prisma__RealtorClient<RealtorGetPayload<T> | null, null>

    /**
     * Find the first Realtor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorFindFirstOrThrowArgs} args - Arguments to find a Realtor
     * @example
     * // Get one Realtor
     * const realtor = await prisma.realtor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RealtorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RealtorFindFirstOrThrowArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Find zero or more Realtors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Realtors
     * const realtors = await prisma.realtor.findMany()
     * 
     * // Get first 10 Realtors
     * const realtors = await prisma.realtor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const realtorWithIdOnly = await prisma.realtor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RealtorFindManyArgs>(
      args?: SelectSubset<T, RealtorFindManyArgs>
    ): Prisma.PrismaPromise<Array<RealtorGetPayload<T>>>

    /**
     * Create a Realtor.
     * @param {RealtorCreateArgs} args - Arguments to create a Realtor.
     * @example
     * // Create one Realtor
     * const Realtor = await prisma.realtor.create({
     *   data: {
     *     // ... data to create a Realtor
     *   }
     * })
     * 
    **/
    create<T extends RealtorCreateArgs>(
      args: SelectSubset<T, RealtorCreateArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Create many Realtors.
     *     @param {RealtorCreateManyArgs} args - Arguments to create many Realtors.
     *     @example
     *     // Create many Realtors
     *     const realtor = await prisma.realtor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RealtorCreateManyArgs>(
      args?: SelectSubset<T, RealtorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Realtor.
     * @param {RealtorDeleteArgs} args - Arguments to delete one Realtor.
     * @example
     * // Delete one Realtor
     * const Realtor = await prisma.realtor.delete({
     *   where: {
     *     // ... filter to delete one Realtor
     *   }
     * })
     * 
    **/
    delete<T extends RealtorDeleteArgs>(
      args: SelectSubset<T, RealtorDeleteArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Update one Realtor.
     * @param {RealtorUpdateArgs} args - Arguments to update one Realtor.
     * @example
     * // Update one Realtor
     * const realtor = await prisma.realtor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RealtorUpdateArgs>(
      args: SelectSubset<T, RealtorUpdateArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Delete zero or more Realtors.
     * @param {RealtorDeleteManyArgs} args - Arguments to filter Realtors to delete.
     * @example
     * // Delete a few Realtors
     * const { count } = await prisma.realtor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RealtorDeleteManyArgs>(
      args?: SelectSubset<T, RealtorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Realtors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Realtors
     * const realtor = await prisma.realtor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RealtorUpdateManyArgs>(
      args: SelectSubset<T, RealtorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Realtor.
     * @param {RealtorUpsertArgs} args - Arguments to update or create a Realtor.
     * @example
     * // Update or create a Realtor
     * const realtor = await prisma.realtor.upsert({
     *   create: {
     *     // ... data to create a Realtor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Realtor we want to update
     *   }
     * })
    **/
    upsert<T extends RealtorUpsertArgs>(
      args: SelectSubset<T, RealtorUpsertArgs>
    ): Prisma__RealtorClient<RealtorGetPayload<T>>

    /**
     * Count the number of Realtors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorCountArgs} args - Arguments to filter Realtors to count.
     * @example
     * // Count the number of Realtors
     * const count = await prisma.realtor.count({
     *   where: {
     *     // ... the filter for the Realtors we want to count
     *   }
     * })
    **/
    count<T extends RealtorCountArgs>(
      args?: Subset<T, RealtorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RealtorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Realtor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RealtorAggregateArgs>(args: Subset<T, RealtorAggregateArgs>): Prisma.PrismaPromise<GetRealtorAggregateType<T>>

    /**
     * Group by Realtor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RealtorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RealtorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RealtorGroupByArgs['orderBy'] }
        : { orderBy?: RealtorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RealtorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRealtorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Realtor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RealtorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    groups<T extends Realtor$groupsArgs= {}>(args?: Subset<T, Realtor$groupsArgs>): Prisma.PrismaPromise<Array<GroupGetPayload<T>>| Null>;

    properties<T extends Realtor$propertiesArgs= {}>(args?: Subset<T, Realtor$propertiesArgs>): Prisma.PrismaPromise<Array<PropertyGetPayload<T>>| Null>;

    ratingsReceived<T extends Realtor$ratingsReceivedArgs= {}>(args?: Subset<T, Realtor$ratingsReceivedArgs>): Prisma.PrismaPromise<Array<RatingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Realtor base type for findUnique actions
   */
  export type RealtorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter, which Realtor to fetch.
     */
    where: RealtorWhereUniqueInput
  }

  /**
   * Realtor findUnique
   */
  export interface RealtorFindUniqueArgs extends RealtorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Realtor findUniqueOrThrow
   */
  export type RealtorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter, which Realtor to fetch.
     */
    where: RealtorWhereUniqueInput
  }


  /**
   * Realtor base type for findFirst actions
   */
  export type RealtorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter, which Realtor to fetch.
     */
    where?: RealtorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realtors to fetch.
     */
    orderBy?: Enumerable<RealtorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Realtors.
     */
    cursor?: RealtorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realtors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realtors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Realtors.
     */
    distinct?: Enumerable<RealtorScalarFieldEnum>
  }

  /**
   * Realtor findFirst
   */
  export interface RealtorFindFirstArgs extends RealtorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Realtor findFirstOrThrow
   */
  export type RealtorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter, which Realtor to fetch.
     */
    where?: RealtorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realtors to fetch.
     */
    orderBy?: Enumerable<RealtorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Realtors.
     */
    cursor?: RealtorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realtors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realtors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Realtors.
     */
    distinct?: Enumerable<RealtorScalarFieldEnum>
  }


  /**
   * Realtor findMany
   */
  export type RealtorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter, which Realtors to fetch.
     */
    where?: RealtorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Realtors to fetch.
     */
    orderBy?: Enumerable<RealtorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Realtors.
     */
    cursor?: RealtorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Realtors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Realtors.
     */
    skip?: number
    distinct?: Enumerable<RealtorScalarFieldEnum>
  }


  /**
   * Realtor create
   */
  export type RealtorCreateArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * The data needed to create a Realtor.
     */
    data: XOR<RealtorCreateInput, RealtorUncheckedCreateInput>
  }


  /**
   * Realtor createMany
   */
  export type RealtorCreateManyArgs = {
    /**
     * The data used to create many Realtors.
     */
    data: Enumerable<RealtorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Realtor update
   */
  export type RealtorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * The data needed to update a Realtor.
     */
    data: XOR<RealtorUpdateInput, RealtorUncheckedUpdateInput>
    /**
     * Choose, which Realtor to update.
     */
    where: RealtorWhereUniqueInput
  }


  /**
   * Realtor updateMany
   */
  export type RealtorUpdateManyArgs = {
    /**
     * The data used to update Realtors.
     */
    data: XOR<RealtorUpdateManyMutationInput, RealtorUncheckedUpdateManyInput>
    /**
     * Filter which Realtors to update
     */
    where?: RealtorWhereInput
  }


  /**
   * Realtor upsert
   */
  export type RealtorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * The filter to search for the Realtor to update in case it exists.
     */
    where: RealtorWhereUniqueInput
    /**
     * In case the Realtor found by the `where` argument doesn't exist, create a new Realtor with this data.
     */
    create: XOR<RealtorCreateInput, RealtorUncheckedCreateInput>
    /**
     * In case the Realtor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RealtorUpdateInput, RealtorUncheckedUpdateInput>
  }


  /**
   * Realtor delete
   */
  export type RealtorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    /**
     * Filter which Realtor to delete.
     */
    where: RealtorWhereUniqueInput
  }


  /**
   * Realtor deleteMany
   */
  export type RealtorDeleteManyArgs = {
    /**
     * Filter which Realtors to delete
     */
    where?: RealtorWhereInput
  }


  /**
   * Realtor.groups
   */
  export type Realtor$groupsArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    where?: GroupWhereInput
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Realtor.properties
   */
  export type Realtor$propertiesArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    where?: PropertyWhereInput
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    cursor?: PropertyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }


  /**
   * Realtor.ratingsReceived
   */
  export type Realtor$ratingsReceivedArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Realtor without action
   */
  export type RealtorArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
  }



  /**
   * Model Otp
   */


  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpMinAggregateOutputType = {
    id: string | null
    userId: string | null
    otp: string | null
    createdAt: Date | null
    otp_expiry: Date | null
    date_modified: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    otp: string | null
    createdAt: Date | null
    otp_expiry: Date | null
    date_modified: Date | null
  }

  export type OtpCountAggregateOutputType = {
    id: number
    userId: number
    otp: number
    createdAt: number
    otp_expiry: number
    date_modified: number
    _all: number
  }


  export type OtpMinAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    otp_expiry?: true
    date_modified?: true
  }

  export type OtpMaxAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    otp_expiry?: true
    date_modified?: true
  }

  export type OtpCountAggregateInputType = {
    id?: true
    userId?: true
    otp?: true
    createdAt?: true
    otp_expiry?: true
    date_modified?: true
    _all?: true
  }

  export type OtpAggregateArgs = {
    /**
     * Filter which Otp to aggregate.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: Enumerable<OtpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs = {
    where?: OtpWhereInput
    orderBy?: Enumerable<OtpOrderByWithAggregationInput>
    by: OtpScalarFieldEnum[]
    having?: OtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }


  export type OtpGroupByOutputType = {
    id: string
    userId: string
    otp: string
    createdAt: Date
    otp_expiry: Date
    date_modified: Date
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type OtpSelect = {
    id?: boolean
    userId?: boolean
    otp?: boolean
    createdAt?: boolean
    otp_expiry?: boolean
    date_modified?: boolean
    user?: boolean | UserArgs
  }


  export type OtpInclude = {
    user?: boolean | UserArgs
  }

  export type OtpGetPayload<S extends boolean | null | undefined | OtpArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Otp :
    S extends undefined ? never :
    S extends { include: any } & (OtpArgs | OtpFindManyArgs)
    ? Otp  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (OtpArgs | OtpFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Otp ? Otp[P] : never
  } 
      : Otp


  type OtpCountArgs = 
    Omit<OtpFindManyArgs, 'select' | 'include'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface OtpDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Otp that matches the filter.
     * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OtpFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OtpFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Otp'> extends True ? Prisma__OtpClient<OtpGetPayload<T>> : Prisma__OtpClient<OtpGetPayload<T> | null, null>

    /**
     * Find one Otp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, OtpFindUniqueOrThrowArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OtpFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OtpFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Otp'> extends True ? Prisma__OtpClient<OtpGetPayload<T>> : Prisma__OtpClient<OtpGetPayload<T> | null, null>

    /**
     * Find the first Otp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(
      args?: SelectSubset<T, OtpFindFirstOrThrowArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpWithIdOnly = await prisma.otp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OtpFindManyArgs>(
      args?: SelectSubset<T, OtpFindManyArgs>
    ): Prisma.PrismaPromise<Array<OtpGetPayload<T>>>

    /**
     * Create a Otp.
     * @param {OtpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
    **/
    create<T extends OtpCreateArgs>(
      args: SelectSubset<T, OtpCreateArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Create many Otps.
     *     @param {OtpCreateManyArgs} args - Arguments to create many Otps.
     *     @example
     *     // Create many Otps
     *     const otp = await prisma.otp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OtpCreateManyArgs>(
      args?: SelectSubset<T, OtpCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Otp.
     * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
    **/
    delete<T extends OtpDeleteArgs>(
      args: SelectSubset<T, OtpDeleteArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Update one Otp.
     * @param {OtpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OtpUpdateArgs>(
      args: SelectSubset<T, OtpUpdateArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Delete zero or more Otps.
     * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OtpDeleteManyArgs>(
      args?: SelectSubset<T, OtpDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OtpUpdateManyArgs>(
      args: SelectSubset<T, OtpUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Otp.
     * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
    **/
    upsert<T extends OtpUpsertArgs>(
      args: SelectSubset<T, OtpUpsertArgs>
    ): Prisma__OtpClient<OtpGetPayload<T>>

    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends OtpCountArgs>(
      args?: Subset<T, OtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OtpClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Otp base type for findUnique actions
   */
  export type OtpFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findUnique
   */
  export interface OtpFindUniqueArgs extends OtpFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Otp findUniqueOrThrow
   */
  export type OtpFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }


  /**
   * Otp base type for findFirst actions
   */
  export type OtpFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: Enumerable<OtpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: Enumerable<OtpScalarFieldEnum>
  }

  /**
   * Otp findFirst
   */
  export interface OtpFindFirstArgs extends OtpFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Otp findFirstOrThrow
   */
  export type OtpFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: Enumerable<OtpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: Enumerable<OtpScalarFieldEnum>
  }


  /**
   * Otp findMany
   */
  export type OtpFindManyArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter, which Otps to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: Enumerable<OtpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    distinct?: Enumerable<OtpScalarFieldEnum>
  }


  /**
   * Otp create
   */
  export type OtpCreateArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * The data needed to create a Otp.
     */
    data: XOR<OtpCreateInput, OtpUncheckedCreateInput>
  }


  /**
   * Otp createMany
   */
  export type OtpCreateManyArgs = {
    /**
     * The data used to create many Otps.
     */
    data: Enumerable<OtpCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Otp update
   */
  export type OtpUpdateArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * The data needed to update a Otp.
     */
    data: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
    /**
     * Choose, which Otp to update.
     */
    where: OtpWhereUniqueInput
  }


  /**
   * Otp updateMany
   */
  export type OtpUpdateManyArgs = {
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
  }


  /**
   * Otp upsert
   */
  export type OtpUpsertArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * The filter to search for the Otp to update in case it exists.
     */
    where: OtpWhereUniqueInput
    /**
     * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
     */
    create: XOR<OtpCreateInput, OtpUncheckedCreateInput>
    /**
     * In case the Otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
  }


  /**
   * Otp delete
   */
  export type OtpDeleteArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
    /**
     * Filter which Otp to delete.
     */
    where: OtpWhereUniqueInput
  }


  /**
   * Otp deleteMany
   */
  export type OtpDeleteManyArgs = {
    /**
     * Filter which Otps to delete
     */
    where?: OtpWhereInput
  }


  /**
   * Otp without action
   */
  export type OtpArgs = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OtpInclude | null
  }



  /**
   * Model Property
   */


  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    langitude: number | null
    latitude: number | null
  }

  export type PropertySumAggregateOutputType = {
    langitude: number | null
    latitude: number | null
  }

  export type PropertyMinAggregateOutputType = {
    id: string | null
    property_title: string | null
    property_type: PROPERTY_TYPES | null
    structure: string | null
    listing_type: string | null
    style: string | null
    view: string | null
    utility_payment: string | null
    year_built: string | null
    pets_allowed: string | null
    available: string | null
    sale_or_rent_price: string | null
    price_prefix: string | null
    payment_frequency: string | null
    payment_plan: string | null
    langitude: number | null
    latitude: number | null
    country: string | null
    street_Number: string | null
    locality: string | null
    postal_code: string | null
    logistics: string | null
    parking_lot: string | null
    parking_slots: string | null
    fire_place: string | null
    entry_floor: string | null
    room_list: string | null
    bedroom: string | null
    bathroom: string | null
    pool: string | null
    building_unit: string | null
    specification: string | null
    video_url: string | null
    video_url_tour: string | null
    date_posted: string | null
    property_price: string | null
    total_lessee: string | null
    permit: string | null
    description: string | null
    additional_details: string | null
    additional_facilities_and_amenities: string | null
    proximate_landmark: string | null
    realtorId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: string | null
    property_title: string | null
    property_type: PROPERTY_TYPES | null
    structure: string | null
    listing_type: string | null
    style: string | null
    view: string | null
    utility_payment: string | null
    year_built: string | null
    pets_allowed: string | null
    available: string | null
    sale_or_rent_price: string | null
    price_prefix: string | null
    payment_frequency: string | null
    payment_plan: string | null
    langitude: number | null
    latitude: number | null
    country: string | null
    street_Number: string | null
    locality: string | null
    postal_code: string | null
    logistics: string | null
    parking_lot: string | null
    parking_slots: string | null
    fire_place: string | null
    entry_floor: string | null
    room_list: string | null
    bedroom: string | null
    bathroom: string | null
    pool: string | null
    building_unit: string | null
    specification: string | null
    video_url: string | null
    video_url_tour: string | null
    date_posted: string | null
    property_price: string | null
    total_lessee: string | null
    permit: string | null
    description: string | null
    additional_details: string | null
    additional_facilities_and_amenities: string | null
    proximate_landmark: string | null
    realtorId: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    property_title: number
    property_type: number
    structure: number
    listing_type: number
    style: number
    view: number
    utility_payment: number
    year_built: number
    pets_allowed: number
    available: number
    sale_or_rent_price: number
    price_prefix: number
    payment_frequency: number
    payment_plan: number
    langitude: number
    latitude: number
    country: number
    street_Number: number
    locality: number
    postal_code: number
    logistics: number
    parking_lot: number
    parking_slots: number
    fire_place: number
    entry_floor: number
    room_list: number
    bedroom: number
    bathroom: number
    pool: number
    building_unit: number
    unit_amenities: number
    specification: number
    images: number
    video_url: number
    video_url_tour: number
    utilities: number
    date_posted: number
    property_price: number
    total_lessee: number
    permit: number
    description: number
    additional_details: number
    additional_facilities_and_amenities: number
    proximate_landmark: number
    realtorId: number
    createdAt: number
    date_modified: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    langitude?: true
    latitude?: true
  }

  export type PropertySumAggregateInputType = {
    langitude?: true
    latitude?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    property_title?: true
    property_type?: true
    structure?: true
    listing_type?: true
    style?: true
    view?: true
    utility_payment?: true
    year_built?: true
    pets_allowed?: true
    available?: true
    sale_or_rent_price?: true
    price_prefix?: true
    payment_frequency?: true
    payment_plan?: true
    langitude?: true
    latitude?: true
    country?: true
    street_Number?: true
    locality?: true
    postal_code?: true
    logistics?: true
    parking_lot?: true
    parking_slots?: true
    fire_place?: true
    entry_floor?: true
    room_list?: true
    bedroom?: true
    bathroom?: true
    pool?: true
    building_unit?: true
    specification?: true
    video_url?: true
    video_url_tour?: true
    date_posted?: true
    property_price?: true
    total_lessee?: true
    permit?: true
    description?: true
    additional_details?: true
    additional_facilities_and_amenities?: true
    proximate_landmark?: true
    realtorId?: true
    createdAt?: true
    date_modified?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    property_title?: true
    property_type?: true
    structure?: true
    listing_type?: true
    style?: true
    view?: true
    utility_payment?: true
    year_built?: true
    pets_allowed?: true
    available?: true
    sale_or_rent_price?: true
    price_prefix?: true
    payment_frequency?: true
    payment_plan?: true
    langitude?: true
    latitude?: true
    country?: true
    street_Number?: true
    locality?: true
    postal_code?: true
    logistics?: true
    parking_lot?: true
    parking_slots?: true
    fire_place?: true
    entry_floor?: true
    room_list?: true
    bedroom?: true
    bathroom?: true
    pool?: true
    building_unit?: true
    specification?: true
    video_url?: true
    video_url_tour?: true
    date_posted?: true
    property_price?: true
    total_lessee?: true
    permit?: true
    description?: true
    additional_details?: true
    additional_facilities_and_amenities?: true
    proximate_landmark?: true
    realtorId?: true
    createdAt?: true
    date_modified?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    property_title?: true
    property_type?: true
    structure?: true
    listing_type?: true
    style?: true
    view?: true
    utility_payment?: true
    year_built?: true
    pets_allowed?: true
    available?: true
    sale_or_rent_price?: true
    price_prefix?: true
    payment_frequency?: true
    payment_plan?: true
    langitude?: true
    latitude?: true
    country?: true
    street_Number?: true
    locality?: true
    postal_code?: true
    logistics?: true
    parking_lot?: true
    parking_slots?: true
    fire_place?: true
    entry_floor?: true
    room_list?: true
    bedroom?: true
    bathroom?: true
    pool?: true
    building_unit?: true
    unit_amenities?: true
    specification?: true
    images?: true
    video_url?: true
    video_url_tour?: true
    utilities?: true
    date_posted?: true
    property_price?: true
    total_lessee?: true
    permit?: true
    description?: true
    additional_details?: true
    additional_facilities_and_amenities?: true
    proximate_landmark?: true
    realtorId?: true
    createdAt?: true
    date_modified?: true
    _all?: true
  }

  export type PropertyAggregateArgs = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs = {
    where?: PropertyWhereInput
    orderBy?: Enumerable<PropertyOrderByWithAggregationInput>
    by: PropertyScalarFieldEnum[]
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }


  export type PropertyGroupByOutputType = {
    id: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities: string[]
    specification: string
    images: string[]
    video_url: string
    video_url_tour: string
    utilities: string[]
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    realtorId: string | null
    createdAt: Date
    date_modified: Date
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect = {
    id?: boolean
    property_title?: boolean
    property_type?: boolean
    structure?: boolean
    listing_type?: boolean
    style?: boolean
    view?: boolean
    utility_payment?: boolean
    year_built?: boolean
    pets_allowed?: boolean
    available?: boolean
    sale_or_rent_price?: boolean
    price_prefix?: boolean
    payment_frequency?: boolean
    payment_plan?: boolean
    langitude?: boolean
    latitude?: boolean
    country?: boolean
    street_Number?: boolean
    locality?: boolean
    postal_code?: boolean
    logistics?: boolean
    parking_lot?: boolean
    parking_slots?: boolean
    fire_place?: boolean
    entry_floor?: boolean
    room_list?: boolean
    bedroom?: boolean
    bathroom?: boolean
    pool?: boolean
    building_unit?: boolean
    unit_amenities?: boolean
    specification?: boolean
    images?: boolean
    video_url?: boolean
    video_url_tour?: boolean
    utilities?: boolean
    date_posted?: boolean
    property_price?: boolean
    total_lessee?: boolean
    permit?: boolean
    description?: boolean
    additional_details?: boolean
    additional_facilities_and_amenities?: boolean
    proximate_landmark?: boolean
    realtorId?: boolean
    createdAt?: boolean
    date_modified?: boolean
    realtor?: boolean | RealtorArgs
  }


  export type PropertyInclude = {
    realtor?: boolean | RealtorArgs
  }

  export type PropertyGetPayload<S extends boolean | null | undefined | PropertyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Property :
    S extends undefined ? never :
    S extends { include: any } & (PropertyArgs | PropertyFindManyArgs)
    ? Property  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'realtor' ? RealtorGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (PropertyArgs | PropertyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'realtor' ? RealtorGetPayload<S['select'][P]> | null :  P extends keyof Property ? Property[P] : never
  } 
      : Property


  type PropertyCountArgs = 
    Omit<PropertyFindManyArgs, 'select' | 'include'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PropertyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Property'> extends True ? Prisma__PropertyClient<PropertyGetPayload<T>> : Prisma__PropertyClient<PropertyGetPayload<T> | null, null>

    /**
     * Find one Property that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PropertyFindUniqueOrThrowArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PropertyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Property'> extends True ? Prisma__PropertyClient<PropertyGetPayload<T>> : Prisma__PropertyClient<PropertyGetPayload<T> | null, null>

    /**
     * Find the first Property that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PropertyFindFirstOrThrowArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyFindManyArgs>(
      args?: SelectSubset<T, PropertyFindManyArgs>
    ): Prisma.PrismaPromise<Array<PropertyGetPayload<T>>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
    **/
    create<T extends PropertyCreateArgs>(
      args: SelectSubset<T, PropertyCreateArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Create many Properties.
     *     @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     *     @example
     *     // Create many Properties
     *     const property = await prisma.property.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PropertyCreateManyArgs>(
      args?: SelectSubset<T, PropertyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
    **/
    delete<T extends PropertyDeleteArgs>(
      args: SelectSubset<T, PropertyDeleteArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyUpdateArgs>(
      args: SelectSubset<T, PropertyUpdateArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyDeleteManyArgs>(
      args?: SelectSubset<T, PropertyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyUpdateManyArgs>(
      args: SelectSubset<T, PropertyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyUpsertArgs>(
      args: SelectSubset<T, PropertyUpsertArgs>
    ): Prisma__PropertyClient<PropertyGetPayload<T>>

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PropertyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    realtor<T extends RealtorArgs= {}>(args?: Subset<T, RealtorArgs>): Prisma__RealtorClient<RealtorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Property base type for findUnique actions
   */
  export type PropertyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUnique
   */
  export interface PropertyFindUniqueArgs extends PropertyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }


  /**
   * Property base type for findFirst actions
   */
  export type PropertyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }

  /**
   * Property findFirst
   */
  export interface PropertyFindFirstArgs extends PropertyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }


  /**
   * Property findMany
   */
  export type PropertyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: Enumerable<PropertyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: Enumerable<PropertyScalarFieldEnum>
  }


  /**
   * Property create
   */
  export type PropertyCreateArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }


  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs = {
    /**
     * The data used to create many Properties.
     */
    data: Enumerable<PropertyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Property update
   */
  export type PropertyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }


  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
  }


  /**
   * Property upsert
   */
  export type PropertyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }


  /**
   * Property delete
   */
  export type PropertyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }


  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
  }


  /**
   * Property without action
   */
  export type PropertyArgs = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PropertyInclude | null
  }



  /**
   * Model Group
   */


  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupMinAggregateOutputType = {
    id: string | null
    name: string | null
    realtorId: string | null
    status: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    realtorId: string | null
    status: string | null
    createdAt: Date | null
    date_modified: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    name: number
    realtorId: number
    status: number
    createdAt: number
    date_modified: number
    _all: number
  }


  export type GroupMinAggregateInputType = {
    id?: true
    name?: true
    realtorId?: true
    status?: true
    createdAt?: true
    date_modified?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    name?: true
    realtorId?: true
    status?: true
    createdAt?: true
    date_modified?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    name?: true
    realtorId?: true
    status?: true
    createdAt?: true
    date_modified?: true
    _all?: true
  }

  export type GroupAggregateArgs = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs = {
    where?: GroupWhereInput
    orderBy?: Enumerable<GroupOrderByWithAggregationInput>
    by: GroupScalarFieldEnum[]
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }


  export type GroupGroupByOutputType = {
    id: string
    name: string
    realtorId: string
    status: string
    createdAt: Date
    date_modified: Date
    _count: GroupCountAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect = {
    id?: boolean
    name?: boolean
    realtorId?: boolean
    status?: boolean
    createdAt?: boolean
    date_modified?: boolean
    members?: boolean | Group$membersArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }


  export type GroupInclude = {
    members?: boolean | Group$membersArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }

  export type GroupGetPayload<S extends boolean | null | undefined | GroupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Group :
    S extends undefined ? never :
    S extends { include: any } & (GroupArgs | GroupFindManyArgs)
    ? Group  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'members' ? Array < RealtorGetPayload<S['include'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupArgs | GroupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'members' ? Array < RealtorGetPayload<S['select'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Group ? Group[P] : never
  } 
      : Group


  type GroupCountArgs = 
    Omit<GroupFindManyArgs, 'select' | 'include'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find one Group that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find the first Group that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs>(
      args?: SelectSubset<T, GroupFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupGetPayload<T>>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs>(
      args: SelectSubset<T, GroupCreateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupCreateManyArgs>(
      args?: SelectSubset<T, GroupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs>(
      args: SelectSubset<T, GroupDeleteArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs>(
      args: SelectSubset<T, GroupUpdateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs>(
      args?: SelectSubset<T, GroupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs>(
      args: SelectSubset<T, GroupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs>(
      args: SelectSubset<T, GroupUpsertArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    members<T extends Group$membersArgs= {}>(args?: Subset<T, Group$membersArgs>): Prisma.PrismaPromise<Array<RealtorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Group base type for findUnique actions
   */
  export type GroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUnique
   */
  export interface GroupFindUniqueArgs extends GroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group base type for findFirst actions
   */
  export type GroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }

  /**
   * Group findFirst
   */
  export interface GroupFindFirstArgs extends GroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group findMany
   */
  export type GroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group create
   */
  export type GroupCreateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }


  /**
   * Group createMany
   */
  export type GroupCreateManyArgs = {
    /**
     * The data used to create many Groups.
     */
    data: Enumerable<GroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Group update
   */
  export type GroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }


  /**
   * Group upsert
   */
  export type GroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }


  /**
   * Group delete
   */
  export type GroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }


  /**
   * Group.members
   */
  export type Group$membersArgs = {
    /**
     * Select specific fields to fetch from the Realtor
     */
    select?: RealtorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RealtorInclude | null
    where?: RealtorWhereInput
    orderBy?: Enumerable<RealtorOrderByWithRelationInput>
    cursor?: RealtorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RealtorScalarFieldEnum>
  }


  /**
   * Group without action
   */
  export type GroupArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
  }



  /**
   * Model Rating
   */


  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    value: number | null
  }

  export type RatingSumAggregateOutputType = {
    value: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    value: number | null
    comment: string | null
    userId: string | null
    realtorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    value: number | null
    comment: string | null
    userId: string | null
    realtorId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    value: number
    comment: number
    userId: number
    realtorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    value?: true
  }

  export type RatingSumAggregateInputType = {
    value?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    value?: true
    comment?: true
    userId?: true
    realtorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    value?: true
    comment?: true
    userId?: true
    realtorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    value?: true
    comment?: true
    userId?: true
    realtorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingAggregateArgs = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs = {
    where?: RatingWhereInput
    orderBy?: Enumerable<RatingOrderByWithAggregationInput>
    by: RatingScalarFieldEnum[]
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }


  export type RatingGroupByOutputType = {
    id: string
    value: number
    comment: string
    userId: string
    realtorId: string
    createdAt: Date
    updatedAt: Date
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect = {
    id?: boolean
    value?: boolean
    comment?: boolean
    userId?: boolean
    realtorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
    realtor?: boolean | RealtorArgs
  }


  export type RatingInclude = {
    user?: boolean | UserArgs
    realtor?: boolean | RealtorArgs
  }

  export type RatingGetPayload<S extends boolean | null | undefined | RatingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Rating :
    S extends undefined ? never :
    S extends { include: any } & (RatingArgs | RatingFindManyArgs)
    ? Rating  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'realtor' ? RealtorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RatingArgs | RatingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'realtor' ? RealtorGetPayload<S['select'][P]> :  P extends keyof Rating ? Rating[P] : never
  } 
      : Rating


  type RatingCountArgs = 
    Omit<RatingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RatingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Rating'> extends True ? Prisma__RatingClient<RatingGetPayload<T>> : Prisma__RatingClient<RatingGetPayload<T> | null, null>

    /**
     * Find one Rating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RatingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Rating'> extends True ? Prisma__RatingClient<RatingGetPayload<T>> : Prisma__RatingClient<RatingGetPayload<T> | null, null>

    /**
     * Find the first Rating that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs>(
      args?: SelectSubset<T, RatingFindManyArgs>
    ): Prisma.PrismaPromise<Array<RatingGetPayload<T>>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs>(
      args: SelectSubset<T, RatingCreateArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs>(
      args?: SelectSubset<T, RatingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs>(
      args: SelectSubset<T, RatingDeleteArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs>(
      args: SelectSubset<T, RatingUpdateArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs>(
      args?: SelectSubset<T, RatingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs>(
      args: SelectSubset<T, RatingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs>(
      args: SelectSubset<T, RatingUpsertArgs>
    ): Prisma__RatingClient<RatingGetPayload<T>>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RatingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    realtor<T extends RealtorArgs= {}>(args?: Subset<T, RealtorArgs>): Prisma__RealtorClient<RealtorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Rating base type for findUnique actions
   */
  export type RatingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUnique
   */
  export interface RatingFindUniqueArgs extends RatingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating base type for findFirst actions
   */
  export type RatingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: Enumerable<RatingScalarFieldEnum>
  }

  /**
   * Rating findFirst
   */
  export interface RatingFindFirstArgs extends RatingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Rating findMany
   */
  export type RatingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: Enumerable<RatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: Enumerable<RatingScalarFieldEnum>
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs = {
    /**
     * The data used to create many Ratings.
     */
    data: Enumerable<RatingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }


  /**
   * Rating without action
   */
  export type RatingArgs = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GroupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    realtorId: 'realtorId',
    status: 'status',
    createdAt: 'createdAt',
    date_modified: 'date_modified'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    otp: 'otp',
    createdAt: 'createdAt',
    otp_expiry: 'otp_expiry',
    date_modified: 'date_modified'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    address: 'address',
    image: 'image',
    userId: 'userId',
    createdAt: 'createdAt',
    date_modified: 'date_modified'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    property_title: 'property_title',
    property_type: 'property_type',
    structure: 'structure',
    listing_type: 'listing_type',
    style: 'style',
    view: 'view',
    utility_payment: 'utility_payment',
    year_built: 'year_built',
    pets_allowed: 'pets_allowed',
    available: 'available',
    sale_or_rent_price: 'sale_or_rent_price',
    price_prefix: 'price_prefix',
    payment_frequency: 'payment_frequency',
    payment_plan: 'payment_plan',
    langitude: 'langitude',
    latitude: 'latitude',
    country: 'country',
    street_Number: 'street_Number',
    locality: 'locality',
    postal_code: 'postal_code',
    logistics: 'logistics',
    parking_lot: 'parking_lot',
    parking_slots: 'parking_slots',
    fire_place: 'fire_place',
    entry_floor: 'entry_floor',
    room_list: 'room_list',
    bedroom: 'bedroom',
    bathroom: 'bathroom',
    pool: 'pool',
    building_unit: 'building_unit',
    unit_amenities: 'unit_amenities',
    specification: 'specification',
    images: 'images',
    video_url: 'video_url',
    video_url_tour: 'video_url_tour',
    utilities: 'utilities',
    date_posted: 'date_posted',
    property_price: 'property_price',
    total_lessee: 'total_lessee',
    permit: 'permit',
    description: 'description',
    additional_details: 'additional_details',
    additional_facilities_and_amenities: 'additional_facilities_and_amenities',
    proximate_landmark: 'proximate_landmark',
    realtorId: 'realtorId',
    createdAt: 'createdAt',
    date_modified: 'date_modified'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RatingScalarFieldEnum: {
    id: 'id',
    value: 'value',
    comment: 'comment',
    userId: 'userId',
    realtorId: 'realtorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const RealtorScalarFieldEnum: {
    id: 'id',
    compant_name: 'compant_name',
    address: 'address',
    broker_BRN: 'broker_BRN',
    agent_ORN: 'agent_ORN',
    years_of_experience: 'years_of_experience',
    specialty: 'specialty',
    role: 'role',
    language: 'language',
    description: 'description',
    license_number: 'license_number',
    broker_card_image: 'broker_card_image',
    image: 'image',
    status: 'status',
    userId: 'userId',
    createdAt: 'createdAt',
    date_modified: 'date_modified'
  };

  export type RealtorScalarFieldEnum = (typeof RealtorScalarFieldEnum)[keyof typeof RealtorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    number: 'number',
    password: 'password',
    type: 'type',
    createdAt: 'createdAt',
    date_modified: 'date_modified',
    verifiedEmail: 'verifiedEmail',
    verifiedNumber: 'verifiedNumber',
    realtorId: 'realtorId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    number?: StringFilter | string
    password?: StringFilter | string
    type?: EnumList_TypesFilter | List_Types
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    verifiedEmail?: BoolFilter | boolean
    verifiedNumber?: BoolFilter | boolean
    realtorId?: StringNullableFilter | string | null
    profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    otp?: OtpListRelationFilter
    realtor?: XOR<RealtorRelationFilter, RealtorWhereInput> | null
    ratingsGiven?: RatingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    number?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    verifiedEmail?: SortOrder
    verifiedNumber?: SortOrder
    realtorId?: SortOrder
    profile?: ProfileOrderByWithRelationInput
    otp?: OtpOrderByRelationAggregateInput
    realtor?: RealtorOrderByWithRelationInput
    ratingsGiven?: RatingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    number?: string
    realtorId?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    number?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    verifiedEmail?: SortOrder
    verifiedNumber?: SortOrder
    realtorId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    number?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    type?: EnumList_TypesWithAggregatesFilter | List_Types
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
    verifiedEmail?: BoolWithAggregatesFilter | boolean
    verifiedNumber?: BoolWithAggregatesFilter | boolean
    realtorId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: StringFilter | string
    fullname?: StringFilter | string
    address?: StringFilter | string
    image?: StringFilter | string
    userId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    address?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    address?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    fullname?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RealtorWhereInput = {
    AND?: Enumerable<RealtorWhereInput>
    OR?: Enumerable<RealtorWhereInput>
    NOT?: Enumerable<RealtorWhereInput>
    id?: StringFilter | string
    compant_name?: StringFilter | string
    address?: StringFilter | string
    broker_BRN?: StringFilter | string
    agent_ORN?: StringFilter | string
    years_of_experience?: StringFilter | string
    specialty?: StringNullableListFilter
    role?: EnumAgent_typeFilter | Agent_type
    language?: StringNullableListFilter
    description?: StringFilter | string
    license_number?: StringFilter | string
    broker_card_image?: StringNullableListFilter
    image?: StringFilter | string
    status?: EnumStatus_typeFilter | Status_type
    userId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
    groups?: GroupListRelationFilter
    properties?: PropertyListRelationFilter
    ratingsReceived?: RatingListRelationFilter
  }

  export type RealtorOrderByWithRelationInput = {
    id?: SortOrder
    compant_name?: SortOrder
    address?: SortOrder
    broker_BRN?: SortOrder
    agent_ORN?: SortOrder
    years_of_experience?: SortOrder
    specialty?: SortOrder
    role?: SortOrder
    language?: SortOrder
    description?: SortOrder
    license_number?: SortOrder
    broker_card_image?: SortOrder
    image?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    user?: UserOrderByWithRelationInput
    groups?: GroupOrderByRelationAggregateInput
    properties?: PropertyOrderByRelationAggregateInput
    ratingsReceived?: RatingOrderByRelationAggregateInput
  }

  export type RealtorWhereUniqueInput = {
    id?: string
    license_number?: string
    userId?: string
  }

  export type RealtorOrderByWithAggregationInput = {
    id?: SortOrder
    compant_name?: SortOrder
    address?: SortOrder
    broker_BRN?: SortOrder
    agent_ORN?: SortOrder
    years_of_experience?: SortOrder
    specialty?: SortOrder
    role?: SortOrder
    language?: SortOrder
    description?: SortOrder
    license_number?: SortOrder
    broker_card_image?: SortOrder
    image?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    _count?: RealtorCountOrderByAggregateInput
    _max?: RealtorMaxOrderByAggregateInput
    _min?: RealtorMinOrderByAggregateInput
  }

  export type RealtorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RealtorScalarWhereWithAggregatesInput>
    OR?: Enumerable<RealtorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RealtorScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    compant_name?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    broker_BRN?: StringWithAggregatesFilter | string
    agent_ORN?: StringWithAggregatesFilter | string
    years_of_experience?: StringWithAggregatesFilter | string
    specialty?: StringNullableListFilter
    role?: EnumAgent_typeWithAggregatesFilter | Agent_type
    language?: StringNullableListFilter
    description?: StringWithAggregatesFilter | string
    license_number?: StringWithAggregatesFilter | string
    broker_card_image?: StringNullableListFilter
    image?: StringWithAggregatesFilter | string
    status?: EnumStatus_typeWithAggregatesFilter | Status_type
    userId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OtpWhereInput = {
    AND?: Enumerable<OtpWhereInput>
    OR?: Enumerable<OtpWhereInput>
    NOT?: Enumerable<OtpWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    otp?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    otp_expiry?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type OtpOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    otp_expiry?: SortOrder
    date_modified?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OtpWhereUniqueInput = {
    id?: string
    userId?: string
  }

  export type OtpOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    otp_expiry?: SortOrder
    date_modified?: SortOrder
    _count?: OtpCountOrderByAggregateInput
    _max?: OtpMaxOrderByAggregateInput
    _min?: OtpMinOrderByAggregateInput
  }

  export type OtpScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OtpScalarWhereWithAggregatesInput>
    OR?: Enumerable<OtpScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OtpScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    otp?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    otp_expiry?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PropertyWhereInput = {
    AND?: Enumerable<PropertyWhereInput>
    OR?: Enumerable<PropertyWhereInput>
    NOT?: Enumerable<PropertyWhereInput>
    id?: StringFilter | string
    property_title?: StringFilter | string
    property_type?: EnumPROPERTY_TYPESFilter | PROPERTY_TYPES
    structure?: StringFilter | string
    listing_type?: StringFilter | string
    style?: StringFilter | string
    view?: StringFilter | string
    utility_payment?: StringFilter | string
    year_built?: StringFilter | string
    pets_allowed?: StringFilter | string
    available?: StringFilter | string
    sale_or_rent_price?: StringFilter | string
    price_prefix?: StringFilter | string
    payment_frequency?: StringFilter | string
    payment_plan?: StringFilter | string
    langitude?: FloatFilter | number
    latitude?: FloatFilter | number
    country?: StringFilter | string
    street_Number?: StringFilter | string
    locality?: StringFilter | string
    postal_code?: StringFilter | string
    logistics?: StringFilter | string
    parking_lot?: StringFilter | string
    parking_slots?: StringFilter | string
    fire_place?: StringFilter | string
    entry_floor?: StringFilter | string
    room_list?: StringFilter | string
    bedroom?: StringFilter | string
    bathroom?: StringFilter | string
    pool?: StringFilter | string
    building_unit?: StringFilter | string
    unit_amenities?: StringNullableListFilter
    specification?: StringFilter | string
    images?: StringNullableListFilter
    video_url?: StringFilter | string
    video_url_tour?: StringFilter | string
    utilities?: StringNullableListFilter
    date_posted?: StringFilter | string
    property_price?: StringFilter | string
    total_lessee?: StringFilter | string
    permit?: StringFilter | string
    description?: StringFilter | string
    additional_details?: StringFilter | string
    additional_facilities_and_amenities?: StringFilter | string
    proximate_landmark?: StringFilter | string
    realtorId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    realtor?: XOR<RealtorRelationFilter, RealtorWhereInput> | null
  }

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder
    property_title?: SortOrder
    property_type?: SortOrder
    structure?: SortOrder
    listing_type?: SortOrder
    style?: SortOrder
    view?: SortOrder
    utility_payment?: SortOrder
    year_built?: SortOrder
    pets_allowed?: SortOrder
    available?: SortOrder
    sale_or_rent_price?: SortOrder
    price_prefix?: SortOrder
    payment_frequency?: SortOrder
    payment_plan?: SortOrder
    langitude?: SortOrder
    latitude?: SortOrder
    country?: SortOrder
    street_Number?: SortOrder
    locality?: SortOrder
    postal_code?: SortOrder
    logistics?: SortOrder
    parking_lot?: SortOrder
    parking_slots?: SortOrder
    fire_place?: SortOrder
    entry_floor?: SortOrder
    room_list?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    pool?: SortOrder
    building_unit?: SortOrder
    unit_amenities?: SortOrder
    specification?: SortOrder
    images?: SortOrder
    video_url?: SortOrder
    video_url_tour?: SortOrder
    utilities?: SortOrder
    date_posted?: SortOrder
    property_price?: SortOrder
    total_lessee?: SortOrder
    permit?: SortOrder
    description?: SortOrder
    additional_details?: SortOrder
    additional_facilities_and_amenities?: SortOrder
    proximate_landmark?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    realtor?: RealtorOrderByWithRelationInput
  }

  export type PropertyWhereUniqueInput = {
    id?: string
  }

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder
    property_title?: SortOrder
    property_type?: SortOrder
    structure?: SortOrder
    listing_type?: SortOrder
    style?: SortOrder
    view?: SortOrder
    utility_payment?: SortOrder
    year_built?: SortOrder
    pets_allowed?: SortOrder
    available?: SortOrder
    sale_or_rent_price?: SortOrder
    price_prefix?: SortOrder
    payment_frequency?: SortOrder
    payment_plan?: SortOrder
    langitude?: SortOrder
    latitude?: SortOrder
    country?: SortOrder
    street_Number?: SortOrder
    locality?: SortOrder
    postal_code?: SortOrder
    logistics?: SortOrder
    parking_lot?: SortOrder
    parking_slots?: SortOrder
    fire_place?: SortOrder
    entry_floor?: SortOrder
    room_list?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    pool?: SortOrder
    building_unit?: SortOrder
    unit_amenities?: SortOrder
    specification?: SortOrder
    images?: SortOrder
    video_url?: SortOrder
    video_url_tour?: SortOrder
    utilities?: SortOrder
    date_posted?: SortOrder
    property_price?: SortOrder
    total_lessee?: SortOrder
    permit?: SortOrder
    description?: SortOrder
    additional_details?: SortOrder
    additional_facilities_and_amenities?: SortOrder
    proximate_landmark?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    OR?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PropertyScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    property_title?: StringWithAggregatesFilter | string
    property_type?: EnumPROPERTY_TYPESWithAggregatesFilter | PROPERTY_TYPES
    structure?: StringWithAggregatesFilter | string
    listing_type?: StringWithAggregatesFilter | string
    style?: StringWithAggregatesFilter | string
    view?: StringWithAggregatesFilter | string
    utility_payment?: StringWithAggregatesFilter | string
    year_built?: StringWithAggregatesFilter | string
    pets_allowed?: StringWithAggregatesFilter | string
    available?: StringWithAggregatesFilter | string
    sale_or_rent_price?: StringWithAggregatesFilter | string
    price_prefix?: StringWithAggregatesFilter | string
    payment_frequency?: StringWithAggregatesFilter | string
    payment_plan?: StringWithAggregatesFilter | string
    langitude?: FloatWithAggregatesFilter | number
    latitude?: FloatWithAggregatesFilter | number
    country?: StringWithAggregatesFilter | string
    street_Number?: StringWithAggregatesFilter | string
    locality?: StringWithAggregatesFilter | string
    postal_code?: StringWithAggregatesFilter | string
    logistics?: StringWithAggregatesFilter | string
    parking_lot?: StringWithAggregatesFilter | string
    parking_slots?: StringWithAggregatesFilter | string
    fire_place?: StringWithAggregatesFilter | string
    entry_floor?: StringWithAggregatesFilter | string
    room_list?: StringWithAggregatesFilter | string
    bedroom?: StringWithAggregatesFilter | string
    bathroom?: StringWithAggregatesFilter | string
    pool?: StringWithAggregatesFilter | string
    building_unit?: StringWithAggregatesFilter | string
    unit_amenities?: StringNullableListFilter
    specification?: StringWithAggregatesFilter | string
    images?: StringNullableListFilter
    video_url?: StringWithAggregatesFilter | string
    video_url_tour?: StringWithAggregatesFilter | string
    utilities?: StringNullableListFilter
    date_posted?: StringWithAggregatesFilter | string
    property_price?: StringWithAggregatesFilter | string
    total_lessee?: StringWithAggregatesFilter | string
    permit?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    additional_details?: StringWithAggregatesFilter | string
    additional_facilities_and_amenities?: StringWithAggregatesFilter | string
    proximate_landmark?: StringWithAggregatesFilter | string
    realtorId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupWhereInput = {
    AND?: Enumerable<GroupWhereInput>
    OR?: Enumerable<GroupWhereInput>
    NOT?: Enumerable<GroupWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    realtorId?: StringFilter | string
    status?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
    members?: RealtorListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    realtorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    members?: RealtorOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = {
    id?: string
  }

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    realtorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    realtorId?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    date_modified?: DateTimeWithAggregatesFilter | Date | string
  }

  export type RatingWhereInput = {
    AND?: Enumerable<RatingWhereInput>
    OR?: Enumerable<RatingWhereInput>
    NOT?: Enumerable<RatingWhereInput>
    id?: StringFilter | string
    value?: IntFilter | number
    comment?: StringFilter | string
    userId?: StringFilter | string
    realtorId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    realtor?: XOR<RealtorRelationFilter, RealtorWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    realtor?: RealtorOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = {
    id?: string
  }

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RatingScalarWhereWithAggregatesInput>
    OR?: Enumerable<RatingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RatingScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    value?: IntWithAggregatesFilter | number
    comment?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    realtorId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otp?: OtpCreateNestedManyWithoutUserInput
    realtor?: RealtorCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otp?: OtpUncheckedCreateNestedManyWithoutUserInput
    realtor?: RealtorUncheckedCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otp?: OtpUpdateManyWithoutUserNestedInput
    realtor?: RealtorUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otp?: OtpUncheckedUpdateManyWithoutUserNestedInput
    realtor?: RealtorUncheckedUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateInput = {
    id?: string
    fullname: string
    address: string
    image: string
    createdAt?: Date | string
    date_modified?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    fullname: string
    address: string
    image: string
    userId: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    fullname: string
    address: string
    image: string
    userId: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RealtorCreateInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    user?: UserCreateNestedOneWithoutRealtorInput
    groups?: GroupCreateNestedManyWithoutMembersInput
    properties?: PropertyCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUncheckedCreateInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    userId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
    groups?: GroupUncheckedCreateNestedManyWithoutMembersInput
    properties?: PropertyUncheckedCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingUncheckedCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRealtorNestedInput
    groups?: GroupUpdateManyWithoutMembersNestedInput
    properties?: PropertyUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUncheckedUpdateManyWithoutMembersNestedInput
    properties?: PropertyUncheckedUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUncheckedUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorCreateManyInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    userId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type RealtorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RealtorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
    user?: UserCreateNestedOneWithoutOtpInput
  }

  export type OtpUncheckedCreateInput = {
    id?: string
    userId: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
  }

  export type OtpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOtpNestedInput
  }

  export type OtpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateManyInput = {
    id?: string
    userId: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
  }

  export type OtpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    createdAt?: Date | string
    date_modified?: Date | string
    realtor?: RealtorCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyUncheckedCreateInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    realtorId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type PropertyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    realtor?: RealtorUpdateOneWithoutPropertiesNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateManyInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    realtorId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type PropertyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateInput = {
    id?: string
    name: string
    realtorId: string
    status: string
    createdAt?: Date | string
    date_modified?: Date | string
    members?: RealtorCreateNestedManyWithoutGroupsInput
  }

  export type GroupUncheckedCreateInput = {
    id?: string
    name: string
    realtorId: string
    status: string
    createdAt?: Date | string
    date_modified?: Date | string
    members?: RealtorUncheckedCreateNestedManyWithoutGroupsInput
  }

  export type GroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: RealtorUpdateManyWithoutGroupsNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: RealtorUncheckedUpdateManyWithoutGroupsNestedInput
  }

  export type GroupCreateManyInput = {
    id?: string
    name: string
    realtorId: string
    status: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateInput = {
    id?: string
    value: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsGivenInput
    realtor: RealtorCreateNestedOneWithoutRatingsReceivedInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    value: number
    comment: string
    userId: string
    realtorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsGivenNestedInput
    realtor?: RealtorUpdateOneRequiredWithoutRatingsReceivedNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCreateManyInput = {
    id?: string
    value: number
    comment: string
    userId: string
    realtorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumList_TypesFilter = {
    equals?: List_Types
    in?: Enumerable<List_Types>
    notIn?: Enumerable<List_Types>
    not?: NestedEnumList_TypesFilter | List_Types
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type OtpListRelationFilter = {
    every?: OtpWhereInput
    some?: OtpWhereInput
    none?: OtpWhereInput
  }

  export type RealtorRelationFilter = {
    is?: RealtorWhereInput | null
    isNot?: RealtorWhereInput | null
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type OtpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    number?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    verifiedEmail?: SortOrder
    verifiedNumber?: SortOrder
    realtorId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    number?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    verifiedEmail?: SortOrder
    verifiedNumber?: SortOrder
    realtorId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    number?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
    verifiedEmail?: SortOrder
    verifiedNumber?: SortOrder
    realtorId?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumList_TypesWithAggregatesFilter = {
    equals?: List_Types
    in?: Enumerable<List_Types>
    notIn?: Enumerable<List_Types>
    not?: NestedEnumList_TypesWithAggregatesFilter | List_Types
    _count?: NestedIntFilter
    _min?: NestedEnumList_TypesFilter
    _max?: NestedEnumList_TypesFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    address?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    address?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    address?: SortOrder
    image?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type EnumAgent_typeFilter = {
    equals?: Agent_type
    in?: Enumerable<Agent_type>
    notIn?: Enumerable<Agent_type>
    not?: NestedEnumAgent_typeFilter | Agent_type
  }

  export type EnumStatus_typeFilter = {
    equals?: Status_type
    in?: Enumerable<Status_type>
    notIn?: Enumerable<Status_type>
    not?: NestedEnumStatus_typeFilter | Status_type
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type PropertyListRelationFilter = {
    every?: PropertyWhereInput
    some?: PropertyWhereInput
    none?: PropertyWhereInput
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PropertyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RealtorCountOrderByAggregateInput = {
    id?: SortOrder
    compant_name?: SortOrder
    address?: SortOrder
    broker_BRN?: SortOrder
    agent_ORN?: SortOrder
    years_of_experience?: SortOrder
    specialty?: SortOrder
    role?: SortOrder
    language?: SortOrder
    description?: SortOrder
    license_number?: SortOrder
    broker_card_image?: SortOrder
    image?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type RealtorMaxOrderByAggregateInput = {
    id?: SortOrder
    compant_name?: SortOrder
    address?: SortOrder
    broker_BRN?: SortOrder
    agent_ORN?: SortOrder
    years_of_experience?: SortOrder
    role?: SortOrder
    description?: SortOrder
    license_number?: SortOrder
    image?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type RealtorMinOrderByAggregateInput = {
    id?: SortOrder
    compant_name?: SortOrder
    address?: SortOrder
    broker_BRN?: SortOrder
    agent_ORN?: SortOrder
    years_of_experience?: SortOrder
    role?: SortOrder
    description?: SortOrder
    license_number?: SortOrder
    image?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type EnumAgent_typeWithAggregatesFilter = {
    equals?: Agent_type
    in?: Enumerable<Agent_type>
    notIn?: Enumerable<Agent_type>
    not?: NestedEnumAgent_typeWithAggregatesFilter | Agent_type
    _count?: NestedIntFilter
    _min?: NestedEnumAgent_typeFilter
    _max?: NestedEnumAgent_typeFilter
  }

  export type EnumStatus_typeWithAggregatesFilter = {
    equals?: Status_type
    in?: Enumerable<Status_type>
    notIn?: Enumerable<Status_type>
    not?: NestedEnumStatus_typeWithAggregatesFilter | Status_type
    _count?: NestedIntFilter
    _min?: NestedEnumStatus_typeFilter
    _max?: NestedEnumStatus_typeFilter
  }

  export type OtpCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    otp_expiry?: SortOrder
    date_modified?: SortOrder
  }

  export type OtpMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    otp_expiry?: SortOrder
    date_modified?: SortOrder
  }

  export type OtpMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    otp?: SortOrder
    createdAt?: SortOrder
    otp_expiry?: SortOrder
    date_modified?: SortOrder
  }

  export type EnumPROPERTY_TYPESFilter = {
    equals?: PROPERTY_TYPES
    in?: Enumerable<PROPERTY_TYPES>
    notIn?: Enumerable<PROPERTY_TYPES>
    not?: NestedEnumPROPERTY_TYPESFilter | PROPERTY_TYPES
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder
    property_title?: SortOrder
    property_type?: SortOrder
    structure?: SortOrder
    listing_type?: SortOrder
    style?: SortOrder
    view?: SortOrder
    utility_payment?: SortOrder
    year_built?: SortOrder
    pets_allowed?: SortOrder
    available?: SortOrder
    sale_or_rent_price?: SortOrder
    price_prefix?: SortOrder
    payment_frequency?: SortOrder
    payment_plan?: SortOrder
    langitude?: SortOrder
    latitude?: SortOrder
    country?: SortOrder
    street_Number?: SortOrder
    locality?: SortOrder
    postal_code?: SortOrder
    logistics?: SortOrder
    parking_lot?: SortOrder
    parking_slots?: SortOrder
    fire_place?: SortOrder
    entry_floor?: SortOrder
    room_list?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    pool?: SortOrder
    building_unit?: SortOrder
    unit_amenities?: SortOrder
    specification?: SortOrder
    images?: SortOrder
    video_url?: SortOrder
    video_url_tour?: SortOrder
    utilities?: SortOrder
    date_posted?: SortOrder
    property_price?: SortOrder
    total_lessee?: SortOrder
    permit?: SortOrder
    description?: SortOrder
    additional_details?: SortOrder
    additional_facilities_and_amenities?: SortOrder
    proximate_landmark?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    langitude?: SortOrder
    latitude?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    property_title?: SortOrder
    property_type?: SortOrder
    structure?: SortOrder
    listing_type?: SortOrder
    style?: SortOrder
    view?: SortOrder
    utility_payment?: SortOrder
    year_built?: SortOrder
    pets_allowed?: SortOrder
    available?: SortOrder
    sale_or_rent_price?: SortOrder
    price_prefix?: SortOrder
    payment_frequency?: SortOrder
    payment_plan?: SortOrder
    langitude?: SortOrder
    latitude?: SortOrder
    country?: SortOrder
    street_Number?: SortOrder
    locality?: SortOrder
    postal_code?: SortOrder
    logistics?: SortOrder
    parking_lot?: SortOrder
    parking_slots?: SortOrder
    fire_place?: SortOrder
    entry_floor?: SortOrder
    room_list?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    pool?: SortOrder
    building_unit?: SortOrder
    specification?: SortOrder
    video_url?: SortOrder
    video_url_tour?: SortOrder
    date_posted?: SortOrder
    property_price?: SortOrder
    total_lessee?: SortOrder
    permit?: SortOrder
    description?: SortOrder
    additional_details?: SortOrder
    additional_facilities_and_amenities?: SortOrder
    proximate_landmark?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder
    property_title?: SortOrder
    property_type?: SortOrder
    structure?: SortOrder
    listing_type?: SortOrder
    style?: SortOrder
    view?: SortOrder
    utility_payment?: SortOrder
    year_built?: SortOrder
    pets_allowed?: SortOrder
    available?: SortOrder
    sale_or_rent_price?: SortOrder
    price_prefix?: SortOrder
    payment_frequency?: SortOrder
    payment_plan?: SortOrder
    langitude?: SortOrder
    latitude?: SortOrder
    country?: SortOrder
    street_Number?: SortOrder
    locality?: SortOrder
    postal_code?: SortOrder
    logistics?: SortOrder
    parking_lot?: SortOrder
    parking_slots?: SortOrder
    fire_place?: SortOrder
    entry_floor?: SortOrder
    room_list?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    pool?: SortOrder
    building_unit?: SortOrder
    specification?: SortOrder
    video_url?: SortOrder
    video_url_tour?: SortOrder
    date_posted?: SortOrder
    property_price?: SortOrder
    total_lessee?: SortOrder
    permit?: SortOrder
    description?: SortOrder
    additional_details?: SortOrder
    additional_facilities_and_amenities?: SortOrder
    proximate_landmark?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    langitude?: SortOrder
    latitude?: SortOrder
  }

  export type EnumPROPERTY_TYPESWithAggregatesFilter = {
    equals?: PROPERTY_TYPES
    in?: Enumerable<PROPERTY_TYPES>
    notIn?: Enumerable<PROPERTY_TYPES>
    not?: NestedEnumPROPERTY_TYPESWithAggregatesFilter | PROPERTY_TYPES
    _count?: NestedIntFilter
    _min?: NestedEnumPROPERTY_TYPESFilter
    _max?: NestedEnumPROPERTY_TYPESFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type RealtorListRelationFilter = {
    every?: RealtorWhereInput
    some?: RealtorWhereInput
    none?: RealtorWhereInput
  }

  export type RealtorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    realtorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    realtorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    realtorId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    date_modified?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    value?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    comment?: SortOrder
    userId?: SortOrder
    realtorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    value?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type OtpCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OtpCreateWithoutUserInput>, Enumerable<OtpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OtpCreateOrConnectWithoutUserInput>
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: Enumerable<OtpWhereUniqueInput>
  }

  export type RealtorCreateNestedOneWithoutUserInput = {
    create?: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutUserInput
    connect?: RealtorWhereUniqueInput
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type OtpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OtpCreateWithoutUserInput>, Enumerable<OtpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OtpCreateOrConnectWithoutUserInput>
    createMany?: OtpCreateManyUserInputEnvelope
    connect?: Enumerable<OtpWhereUniqueInput>
  }

  export type RealtorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutUserInput
    connect?: RealtorWhereUniqueInput
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumList_TypesFieldUpdateOperationsInput = {
    set?: List_Types
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type OtpUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<OtpCreateWithoutUserInput>, Enumerable<OtpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OtpCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OtpUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OtpCreateManyUserInputEnvelope
    set?: Enumerable<OtpWhereUniqueInput>
    disconnect?: Enumerable<OtpWhereUniqueInput>
    delete?: Enumerable<OtpWhereUniqueInput>
    connect?: Enumerable<OtpWhereUniqueInput>
    update?: Enumerable<OtpUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OtpUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OtpScalarWhereInput>
  }

  export type RealtorUpdateOneWithoutUserNestedInput = {
    create?: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutUserInput
    upsert?: RealtorUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: RealtorWhereUniqueInput
    update?: XOR<RealtorUpdateWithoutUserInput, RealtorUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type OtpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<OtpCreateWithoutUserInput>, Enumerable<OtpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OtpCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OtpUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OtpCreateManyUserInputEnvelope
    set?: Enumerable<OtpWhereUniqueInput>
    disconnect?: Enumerable<OtpWhereUniqueInput>
    delete?: Enumerable<OtpWhereUniqueInput>
    connect?: Enumerable<OtpWhereUniqueInput>
    update?: Enumerable<OtpUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OtpUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OtpScalarWhereInput>
  }

  export type RealtorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutUserInput
    upsert?: RealtorUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: RealtorWhereUniqueInput
    update?: XOR<RealtorUpdateWithoutUserInput, RealtorUncheckedUpdateWithoutUserInput>
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutUserInput>, Enumerable<RatingUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RatingCreateManyUserInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type RealtorCreatespecialtyInput = {
    set: Enumerable<string>
  }

  export type RealtorCreatelanguageInput = {
    set: Enumerable<string>
  }

  export type RealtorCreatebroker_card_imageInput = {
    set: Enumerable<string>
  }

  export type UserCreateNestedOneWithoutRealtorInput = {
    create?: XOR<UserCreateWithoutRealtorInput, UserUncheckedCreateWithoutRealtorInput>
    connectOrCreate?: UserCreateOrConnectWithoutRealtorInput
    connect?: UserWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<GroupCreateWithoutMembersInput>, Enumerable<GroupUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<GroupWhereUniqueInput>
  }

  export type PropertyCreateNestedManyWithoutRealtorInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutRealtorInput>, Enumerable<PropertyUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutRealtorInput>
    createMany?: PropertyCreateManyRealtorInputEnvelope
    connect?: Enumerable<PropertyWhereUniqueInput>
  }

  export type RatingCreateNestedManyWithoutRealtorInput = {
    create?: XOR<Enumerable<RatingCreateWithoutRealtorInput>, Enumerable<RatingUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutRealtorInput>
    createMany?: RatingCreateManyRealtorInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type GroupUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<Enumerable<GroupCreateWithoutMembersInput>, Enumerable<GroupUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutMembersInput>
    connect?: Enumerable<GroupWhereUniqueInput>
  }

  export type PropertyUncheckedCreateNestedManyWithoutRealtorInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutRealtorInput>, Enumerable<PropertyUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutRealtorInput>
    createMany?: PropertyCreateManyRealtorInputEnvelope
    connect?: Enumerable<PropertyWhereUniqueInput>
  }

  export type RatingUncheckedCreateNestedManyWithoutRealtorInput = {
    create?: XOR<Enumerable<RatingCreateWithoutRealtorInput>, Enumerable<RatingUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutRealtorInput>
    createMany?: RatingCreateManyRealtorInputEnvelope
    connect?: Enumerable<RatingWhereUniqueInput>
  }

  export type RealtorUpdatespecialtyInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type EnumAgent_typeFieldUpdateOperationsInput = {
    set?: Agent_type
  }

  export type RealtorUpdatelanguageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type RealtorUpdatebroker_card_imageInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type EnumStatus_typeFieldUpdateOperationsInput = {
    set?: Status_type
  }

  export type UserUpdateOneWithoutRealtorNestedInput = {
    create?: XOR<UserCreateWithoutRealtorInput, UserUncheckedCreateWithoutRealtorInput>
    connectOrCreate?: UserCreateOrConnectWithoutRealtorInput
    upsert?: UserUpsertWithoutRealtorInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRealtorInput, UserUncheckedUpdateWithoutRealtorInput>
  }

  export type GroupUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<GroupCreateWithoutMembersInput>, Enumerable<GroupUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<GroupUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<GroupWhereUniqueInput>
    disconnect?: Enumerable<GroupWhereUniqueInput>
    delete?: Enumerable<GroupWhereUniqueInput>
    connect?: Enumerable<GroupWhereUniqueInput>
    update?: Enumerable<GroupUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<GroupUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<GroupScalarWhereInput>
  }

  export type PropertyUpdateManyWithoutRealtorNestedInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutRealtorInput>, Enumerable<PropertyUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutRealtorInput>
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutRealtorInput>
    createMany?: PropertyCreateManyRealtorInputEnvelope
    set?: Enumerable<PropertyWhereUniqueInput>
    disconnect?: Enumerable<PropertyWhereUniqueInput>
    delete?: Enumerable<PropertyWhereUniqueInput>
    connect?: Enumerable<PropertyWhereUniqueInput>
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutRealtorInput>
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutRealtorInput>
    deleteMany?: Enumerable<PropertyScalarWhereInput>
  }

  export type RatingUpdateManyWithoutRealtorNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutRealtorInput>, Enumerable<RatingUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutRealtorInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutRealtorInput>
    createMany?: RatingCreateManyRealtorInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutRealtorInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutRealtorInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type GroupUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<Enumerable<GroupCreateWithoutMembersInput>, Enumerable<GroupUncheckedCreateWithoutMembersInput>>
    connectOrCreate?: Enumerable<GroupCreateOrConnectWithoutMembersInput>
    upsert?: Enumerable<GroupUpsertWithWhereUniqueWithoutMembersInput>
    set?: Enumerable<GroupWhereUniqueInput>
    disconnect?: Enumerable<GroupWhereUniqueInput>
    delete?: Enumerable<GroupWhereUniqueInput>
    connect?: Enumerable<GroupWhereUniqueInput>
    update?: Enumerable<GroupUpdateWithWhereUniqueWithoutMembersInput>
    updateMany?: Enumerable<GroupUpdateManyWithWhereWithoutMembersInput>
    deleteMany?: Enumerable<GroupScalarWhereInput>
  }

  export type PropertyUncheckedUpdateManyWithoutRealtorNestedInput = {
    create?: XOR<Enumerable<PropertyCreateWithoutRealtorInput>, Enumerable<PropertyUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<PropertyCreateOrConnectWithoutRealtorInput>
    upsert?: Enumerable<PropertyUpsertWithWhereUniqueWithoutRealtorInput>
    createMany?: PropertyCreateManyRealtorInputEnvelope
    set?: Enumerable<PropertyWhereUniqueInput>
    disconnect?: Enumerable<PropertyWhereUniqueInput>
    delete?: Enumerable<PropertyWhereUniqueInput>
    connect?: Enumerable<PropertyWhereUniqueInput>
    update?: Enumerable<PropertyUpdateWithWhereUniqueWithoutRealtorInput>
    updateMany?: Enumerable<PropertyUpdateManyWithWhereWithoutRealtorInput>
    deleteMany?: Enumerable<PropertyScalarWhereInput>
  }

  export type RatingUncheckedUpdateManyWithoutRealtorNestedInput = {
    create?: XOR<Enumerable<RatingCreateWithoutRealtorInput>, Enumerable<RatingUncheckedCreateWithoutRealtorInput>>
    connectOrCreate?: Enumerable<RatingCreateOrConnectWithoutRealtorInput>
    upsert?: Enumerable<RatingUpsertWithWhereUniqueWithoutRealtorInput>
    createMany?: RatingCreateManyRealtorInputEnvelope
    set?: Enumerable<RatingWhereUniqueInput>
    disconnect?: Enumerable<RatingWhereUniqueInput>
    delete?: Enumerable<RatingWhereUniqueInput>
    connect?: Enumerable<RatingWhereUniqueInput>
    update?: Enumerable<RatingUpdateWithWhereUniqueWithoutRealtorInput>
    updateMany?: Enumerable<RatingUpdateManyWithWhereWithoutRealtorInput>
    deleteMany?: Enumerable<RatingScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutOtpInput = {
    create?: XOR<UserCreateWithoutOtpInput, UserUncheckedCreateWithoutOtpInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutOtpNestedInput = {
    create?: XOR<UserCreateWithoutOtpInput, UserUncheckedCreateWithoutOtpInput>
    connectOrCreate?: UserCreateOrConnectWithoutOtpInput
    upsert?: UserUpsertWithoutOtpInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOtpInput, UserUncheckedUpdateWithoutOtpInput>
  }

  export type PropertyCreateunit_amenitiesInput = {
    set: Enumerable<string>
  }

  export type PropertyCreateimagesInput = {
    set: Enumerable<string>
  }

  export type PropertyCreateutilitiesInput = {
    set: Enumerable<string>
  }

  export type RealtorCreateNestedOneWithoutPropertiesInput = {
    create?: XOR<RealtorCreateWithoutPropertiesInput, RealtorUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutPropertiesInput
    connect?: RealtorWhereUniqueInput
  }

  export type EnumPROPERTY_TYPESFieldUpdateOperationsInput = {
    set?: PROPERTY_TYPES
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PropertyUpdateunit_amenitiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PropertyUpdateimagesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type PropertyUpdateutilitiesInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type RealtorUpdateOneWithoutPropertiesNestedInput = {
    create?: XOR<RealtorCreateWithoutPropertiesInput, RealtorUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutPropertiesInput
    upsert?: RealtorUpsertWithoutPropertiesInput
    disconnect?: boolean
    delete?: boolean
    connect?: RealtorWhereUniqueInput
    update?: XOR<RealtorUpdateWithoutPropertiesInput, RealtorUncheckedUpdateWithoutPropertiesInput>
  }

  export type RealtorCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<RealtorCreateWithoutGroupsInput>, Enumerable<RealtorUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<RealtorCreateOrConnectWithoutGroupsInput>
    connect?: Enumerable<RealtorWhereUniqueInput>
  }

  export type RealtorUncheckedCreateNestedManyWithoutGroupsInput = {
    create?: XOR<Enumerable<RealtorCreateWithoutGroupsInput>, Enumerable<RealtorUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<RealtorCreateOrConnectWithoutGroupsInput>
    connect?: Enumerable<RealtorWhereUniqueInput>
  }

  export type RealtorUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<RealtorCreateWithoutGroupsInput>, Enumerable<RealtorUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<RealtorCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<RealtorUpsertWithWhereUniqueWithoutGroupsInput>
    set?: Enumerable<RealtorWhereUniqueInput>
    disconnect?: Enumerable<RealtorWhereUniqueInput>
    delete?: Enumerable<RealtorWhereUniqueInput>
    connect?: Enumerable<RealtorWhereUniqueInput>
    update?: Enumerable<RealtorUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<RealtorUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<RealtorScalarWhereInput>
  }

  export type RealtorUncheckedUpdateManyWithoutGroupsNestedInput = {
    create?: XOR<Enumerable<RealtorCreateWithoutGroupsInput>, Enumerable<RealtorUncheckedCreateWithoutGroupsInput>>
    connectOrCreate?: Enumerable<RealtorCreateOrConnectWithoutGroupsInput>
    upsert?: Enumerable<RealtorUpsertWithWhereUniqueWithoutGroupsInput>
    set?: Enumerable<RealtorWhereUniqueInput>
    disconnect?: Enumerable<RealtorWhereUniqueInput>
    delete?: Enumerable<RealtorWhereUniqueInput>
    connect?: Enumerable<RealtorWhereUniqueInput>
    update?: Enumerable<RealtorUpdateWithWhereUniqueWithoutGroupsInput>
    updateMany?: Enumerable<RealtorUpdateManyWithWhereWithoutGroupsInput>
    deleteMany?: Enumerable<RealtorScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutRatingsGivenInput = {
    create?: XOR<UserCreateWithoutRatingsGivenInput, UserUncheckedCreateWithoutRatingsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsGivenInput
    connect?: UserWhereUniqueInput
  }

  export type RealtorCreateNestedOneWithoutRatingsReceivedInput = {
    create?: XOR<RealtorCreateWithoutRatingsReceivedInput, RealtorUncheckedCreateWithoutRatingsReceivedInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutRatingsReceivedInput
    connect?: RealtorWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutRatingsGivenNestedInput = {
    create?: XOR<UserCreateWithoutRatingsGivenInput, UserUncheckedCreateWithoutRatingsGivenInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingsGivenInput
    upsert?: UserUpsertWithoutRatingsGivenInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutRatingsGivenInput, UserUncheckedUpdateWithoutRatingsGivenInput>
  }

  export type RealtorUpdateOneRequiredWithoutRatingsReceivedNestedInput = {
    create?: XOR<RealtorCreateWithoutRatingsReceivedInput, RealtorUncheckedCreateWithoutRatingsReceivedInput>
    connectOrCreate?: RealtorCreateOrConnectWithoutRatingsReceivedInput
    upsert?: RealtorUpsertWithoutRatingsReceivedInput
    connect?: RealtorWhereUniqueInput
    update?: XOR<RealtorUpdateWithoutRatingsReceivedInput, RealtorUncheckedUpdateWithoutRatingsReceivedInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumList_TypesFilter = {
    equals?: List_Types
    in?: Enumerable<List_Types>
    notIn?: Enumerable<List_Types>
    not?: NestedEnumList_TypesFilter | List_Types
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedEnumList_TypesWithAggregatesFilter = {
    equals?: List_Types
    in?: Enumerable<List_Types>
    notIn?: Enumerable<List_Types>
    not?: NestedEnumList_TypesWithAggregatesFilter | List_Types
    _count?: NestedIntFilter
    _min?: NestedEnumList_TypesFilter
    _max?: NestedEnumList_TypesFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedEnumAgent_typeFilter = {
    equals?: Agent_type
    in?: Enumerable<Agent_type>
    notIn?: Enumerable<Agent_type>
    not?: NestedEnumAgent_typeFilter | Agent_type
  }

  export type NestedEnumStatus_typeFilter = {
    equals?: Status_type
    in?: Enumerable<Status_type>
    notIn?: Enumerable<Status_type>
    not?: NestedEnumStatus_typeFilter | Status_type
  }

  export type NestedEnumAgent_typeWithAggregatesFilter = {
    equals?: Agent_type
    in?: Enumerable<Agent_type>
    notIn?: Enumerable<Agent_type>
    not?: NestedEnumAgent_typeWithAggregatesFilter | Agent_type
    _count?: NestedIntFilter
    _min?: NestedEnumAgent_typeFilter
    _max?: NestedEnumAgent_typeFilter
  }

  export type NestedEnumStatus_typeWithAggregatesFilter = {
    equals?: Status_type
    in?: Enumerable<Status_type>
    notIn?: Enumerable<Status_type>
    not?: NestedEnumStatus_typeWithAggregatesFilter | Status_type
    _count?: NestedIntFilter
    _min?: NestedEnumStatus_typeFilter
    _max?: NestedEnumStatus_typeFilter
  }

  export type NestedEnumPROPERTY_TYPESFilter = {
    equals?: PROPERTY_TYPES
    in?: Enumerable<PROPERTY_TYPES>
    notIn?: Enumerable<PROPERTY_TYPES>
    not?: NestedEnumPROPERTY_TYPESFilter | PROPERTY_TYPES
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumPROPERTY_TYPESWithAggregatesFilter = {
    equals?: PROPERTY_TYPES
    in?: Enumerable<PROPERTY_TYPES>
    notIn?: Enumerable<PROPERTY_TYPES>
    not?: NestedEnumPROPERTY_TYPESWithAggregatesFilter | PROPERTY_TYPES
    _count?: NestedIntFilter
    _min?: NestedEnumPROPERTY_TYPESFilter
    _max?: NestedEnumPROPERTY_TYPESFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    fullname: string
    address: string
    image: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    fullname: string
    address: string
    image: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type OtpCreateWithoutUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
  }

  export type OtpUncheckedCreateWithoutUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
  }

  export type OtpCreateOrConnectWithoutUserInput = {
    where: OtpWhereUniqueInput
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpCreateManyUserInputEnvelope = {
    data: Enumerable<OtpCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RealtorCreateWithoutUserInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    groups?: GroupCreateNestedManyWithoutMembersInput
    properties?: PropertyCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUncheckedCreateWithoutUserInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    groups?: GroupUncheckedCreateNestedManyWithoutMembersInput
    properties?: PropertyUncheckedCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingUncheckedCreateNestedManyWithoutRealtorInput
  }

  export type RealtorCreateOrConnectWithoutUserInput = {
    where: RealtorWhereUniqueInput
    create: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    value: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    realtor: RealtorCreateNestedOneWithoutRatingsReceivedInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    value: number
    comment: string
    realtorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: Enumerable<RatingCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullname?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUpsertWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    update: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
    create: XOR<OtpCreateWithoutUserInput, OtpUncheckedCreateWithoutUserInput>
  }

  export type OtpUpdateWithWhereUniqueWithoutUserInput = {
    where: OtpWhereUniqueInput
    data: XOR<OtpUpdateWithoutUserInput, OtpUncheckedUpdateWithoutUserInput>
  }

  export type OtpUpdateManyWithWhereWithoutUserInput = {
    where: OtpScalarWhereInput
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyWithoutOtpInput>
  }

  export type OtpScalarWhereInput = {
    AND?: Enumerable<OtpScalarWhereInput>
    OR?: Enumerable<OtpScalarWhereInput>
    NOT?: Enumerable<OtpScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    otp?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    otp_expiry?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
  }

  export type RealtorUpsertWithoutUserInput = {
    update: XOR<RealtorUpdateWithoutUserInput, RealtorUncheckedUpdateWithoutUserInput>
    create: XOR<RealtorCreateWithoutUserInput, RealtorUncheckedCreateWithoutUserInput>
  }

  export type RealtorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUpdateManyWithoutMembersNestedInput
    properties?: PropertyUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUncheckedUpdateManyWithoutMembersNestedInput
    properties?: PropertyUncheckedUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUncheckedUpdateManyWithoutRealtorNestedInput
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutRatingsGivenInput>
  }

  export type RatingScalarWhereInput = {
    AND?: Enumerable<RatingScalarWhereInput>
    OR?: Enumerable<RatingScalarWhereInput>
    NOT?: Enumerable<RatingScalarWhereInput>
    id?: StringFilter | string
    value?: IntFilter | number
    comment?: StringFilter | string
    userId?: StringFilter | string
    realtorId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    otp?: OtpCreateNestedManyWithoutUserInput
    realtor?: RealtorCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    otp?: OtpUncheckedCreateNestedManyWithoutUserInput
    realtor?: RealtorUncheckedCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    otp?: OtpUpdateManyWithoutUserNestedInput
    realtor?: RealtorUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    otp?: OtpUncheckedUpdateManyWithoutUserNestedInput
    realtor?: RealtorUncheckedUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRealtorInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otp?: OtpCreateNestedManyWithoutUserInput
    ratingsGiven?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRealtorInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otp?: OtpUncheckedCreateNestedManyWithoutUserInput
    ratingsGiven?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRealtorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRealtorInput, UserUncheckedCreateWithoutRealtorInput>
  }

  export type GroupCreateWithoutMembersInput = {
    id?: string
    name: string
    realtorId: string
    status: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type GroupUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    realtorId: string
    status: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type GroupCreateOrConnectWithoutMembersInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
  }

  export type PropertyCreateWithoutRealtorInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type PropertyUncheckedCreateWithoutRealtorInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type PropertyCreateOrConnectWithoutRealtorInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutRealtorInput, PropertyUncheckedCreateWithoutRealtorInput>
  }

  export type PropertyCreateManyRealtorInputEnvelope = {
    data: Enumerable<PropertyCreateManyRealtorInput>
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutRealtorInput = {
    id?: string
    value: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRatingsGivenInput
  }

  export type RatingUncheckedCreateWithoutRealtorInput = {
    id?: string
    value: number
    comment: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCreateOrConnectWithoutRealtorInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutRealtorInput, RatingUncheckedCreateWithoutRealtorInput>
  }

  export type RatingCreateManyRealtorInputEnvelope = {
    data: Enumerable<RatingCreateManyRealtorInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRealtorInput = {
    update: XOR<UserUpdateWithoutRealtorInput, UserUncheckedUpdateWithoutRealtorInput>
    create: XOR<UserCreateWithoutRealtorInput, UserUncheckedCreateWithoutRealtorInput>
  }

  export type UserUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otp?: OtpUpdateManyWithoutUserNestedInput
    ratingsGiven?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otp?: OtpUncheckedUpdateManyWithoutUserNestedInput
    ratingsGiven?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupUpsertWithWhereUniqueWithoutMembersInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
    create: XOR<GroupCreateWithoutMembersInput, GroupUncheckedCreateWithoutMembersInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutMembersInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutMembersInput, GroupUncheckedUpdateWithoutMembersInput>
  }

  export type GroupUpdateManyWithWhereWithoutMembersInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutGroupsInput>
  }

  export type GroupScalarWhereInput = {
    AND?: Enumerable<GroupScalarWhereInput>
    OR?: Enumerable<GroupScalarWhereInput>
    NOT?: Enumerable<GroupScalarWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    realtorId?: StringFilter | string
    status?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
  }

  export type PropertyUpsertWithWhereUniqueWithoutRealtorInput = {
    where: PropertyWhereUniqueInput
    update: XOR<PropertyUpdateWithoutRealtorInput, PropertyUncheckedUpdateWithoutRealtorInput>
    create: XOR<PropertyCreateWithoutRealtorInput, PropertyUncheckedCreateWithoutRealtorInput>
  }

  export type PropertyUpdateWithWhereUniqueWithoutRealtorInput = {
    where: PropertyWhereUniqueInput
    data: XOR<PropertyUpdateWithoutRealtorInput, PropertyUncheckedUpdateWithoutRealtorInput>
  }

  export type PropertyUpdateManyWithWhereWithoutRealtorInput = {
    where: PropertyScalarWhereInput
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyWithoutPropertiesInput>
  }

  export type PropertyScalarWhereInput = {
    AND?: Enumerable<PropertyScalarWhereInput>
    OR?: Enumerable<PropertyScalarWhereInput>
    NOT?: Enumerable<PropertyScalarWhereInput>
    id?: StringFilter | string
    property_title?: StringFilter | string
    property_type?: EnumPROPERTY_TYPESFilter | PROPERTY_TYPES
    structure?: StringFilter | string
    listing_type?: StringFilter | string
    style?: StringFilter | string
    view?: StringFilter | string
    utility_payment?: StringFilter | string
    year_built?: StringFilter | string
    pets_allowed?: StringFilter | string
    available?: StringFilter | string
    sale_or_rent_price?: StringFilter | string
    price_prefix?: StringFilter | string
    payment_frequency?: StringFilter | string
    payment_plan?: StringFilter | string
    langitude?: FloatFilter | number
    latitude?: FloatFilter | number
    country?: StringFilter | string
    street_Number?: StringFilter | string
    locality?: StringFilter | string
    postal_code?: StringFilter | string
    logistics?: StringFilter | string
    parking_lot?: StringFilter | string
    parking_slots?: StringFilter | string
    fire_place?: StringFilter | string
    entry_floor?: StringFilter | string
    room_list?: StringFilter | string
    bedroom?: StringFilter | string
    bathroom?: StringFilter | string
    pool?: StringFilter | string
    building_unit?: StringFilter | string
    unit_amenities?: StringNullableListFilter
    specification?: StringFilter | string
    images?: StringNullableListFilter
    video_url?: StringFilter | string
    video_url_tour?: StringFilter | string
    utilities?: StringNullableListFilter
    date_posted?: StringFilter | string
    property_price?: StringFilter | string
    total_lessee?: StringFilter | string
    permit?: StringFilter | string
    description?: StringFilter | string
    additional_details?: StringFilter | string
    additional_facilities_and_amenities?: StringFilter | string
    proximate_landmark?: StringFilter | string
    realtorId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
  }

  export type RatingUpsertWithWhereUniqueWithoutRealtorInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutRealtorInput, RatingUncheckedUpdateWithoutRealtorInput>
    create: XOR<RatingCreateWithoutRealtorInput, RatingUncheckedCreateWithoutRealtorInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutRealtorInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutRealtorInput, RatingUncheckedUpdateWithoutRealtorInput>
  }

  export type RatingUpdateManyWithWhereWithoutRealtorInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutRatingsReceivedInput>
  }

  export type UserCreateWithoutOtpInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    realtor?: RealtorCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOtpInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    realtor?: RealtorUncheckedCreateNestedOneWithoutUserInput
    ratingsGiven?: RatingUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOtpInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOtpInput, UserUncheckedCreateWithoutOtpInput>
  }

  export type UserUpsertWithoutOtpInput = {
    update: XOR<UserUpdateWithoutOtpInput, UserUncheckedUpdateWithoutOtpInput>
    create: XOR<UserCreateWithoutOtpInput, UserUncheckedCreateWithoutOtpInput>
  }

  export type UserUpdateWithoutOtpInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    realtor?: RealtorUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOtpInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    realtor?: RealtorUncheckedUpdateOneWithoutUserNestedInput
    ratingsGiven?: RatingUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RealtorCreateWithoutPropertiesInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    user?: UserCreateNestedOneWithoutRealtorInput
    groups?: GroupCreateNestedManyWithoutMembersInput
    ratingsReceived?: RatingCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUncheckedCreateWithoutPropertiesInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    userId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
    groups?: GroupUncheckedCreateNestedManyWithoutMembersInput
    ratingsReceived?: RatingUncheckedCreateNestedManyWithoutRealtorInput
  }

  export type RealtorCreateOrConnectWithoutPropertiesInput = {
    where: RealtorWhereUniqueInput
    create: XOR<RealtorCreateWithoutPropertiesInput, RealtorUncheckedCreateWithoutPropertiesInput>
  }

  export type RealtorUpsertWithoutPropertiesInput = {
    update: XOR<RealtorUpdateWithoutPropertiesInput, RealtorUncheckedUpdateWithoutPropertiesInput>
    create: XOR<RealtorCreateWithoutPropertiesInput, RealtorUncheckedCreateWithoutPropertiesInput>
  }

  export type RealtorUpdateWithoutPropertiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRealtorNestedInput
    groups?: GroupUpdateManyWithoutMembersNestedInput
    ratingsReceived?: RatingUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateWithoutPropertiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUncheckedUpdateManyWithoutMembersNestedInput
    ratingsReceived?: RatingUncheckedUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorCreateWithoutGroupsInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    user?: UserCreateNestedOneWithoutRealtorInput
    properties?: PropertyCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUncheckedCreateWithoutGroupsInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    userId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
    properties?: PropertyUncheckedCreateNestedManyWithoutRealtorInput
    ratingsReceived?: RatingUncheckedCreateNestedManyWithoutRealtorInput
  }

  export type RealtorCreateOrConnectWithoutGroupsInput = {
    where: RealtorWhereUniqueInput
    create: XOR<RealtorCreateWithoutGroupsInput, RealtorUncheckedCreateWithoutGroupsInput>
  }

  export type RealtorUpsertWithWhereUniqueWithoutGroupsInput = {
    where: RealtorWhereUniqueInput
    update: XOR<RealtorUpdateWithoutGroupsInput, RealtorUncheckedUpdateWithoutGroupsInput>
    create: XOR<RealtorCreateWithoutGroupsInput, RealtorUncheckedCreateWithoutGroupsInput>
  }

  export type RealtorUpdateWithWhereUniqueWithoutGroupsInput = {
    where: RealtorWhereUniqueInput
    data: XOR<RealtorUpdateWithoutGroupsInput, RealtorUncheckedUpdateWithoutGroupsInput>
  }

  export type RealtorUpdateManyWithWhereWithoutGroupsInput = {
    where: RealtorScalarWhereInput
    data: XOR<RealtorUpdateManyMutationInput, RealtorUncheckedUpdateManyWithoutMembersInput>
  }

  export type RealtorScalarWhereInput = {
    AND?: Enumerable<RealtorScalarWhereInput>
    OR?: Enumerable<RealtorScalarWhereInput>
    NOT?: Enumerable<RealtorScalarWhereInput>
    id?: StringFilter | string
    compant_name?: StringFilter | string
    address?: StringFilter | string
    broker_BRN?: StringFilter | string
    agent_ORN?: StringFilter | string
    years_of_experience?: StringFilter | string
    specialty?: StringNullableListFilter
    role?: EnumAgent_typeFilter | Agent_type
    language?: StringNullableListFilter
    description?: StringFilter | string
    license_number?: StringFilter | string
    broker_card_image?: StringNullableListFilter
    image?: StringFilter | string
    status?: EnumStatus_typeFilter | Status_type
    userId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    date_modified?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutRatingsGivenInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileCreateNestedOneWithoutUserInput
    otp?: OtpCreateNestedManyWithoutUserInput
    realtor?: RealtorCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingsGivenInput = {
    id?: string
    email: string
    number: string
    password: string
    type?: List_Types
    createdAt?: Date | string
    date_modified?: Date | string
    verifiedEmail?: boolean
    verifiedNumber?: boolean
    realtorId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    otp?: OtpUncheckedCreateNestedManyWithoutUserInput
    realtor?: RealtorUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingsGivenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingsGivenInput, UserUncheckedCreateWithoutRatingsGivenInput>
  }

  export type RealtorCreateWithoutRatingsReceivedInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    createdAt?: Date | string
    date_modified?: Date | string
    user?: UserCreateNestedOneWithoutRealtorInput
    groups?: GroupCreateNestedManyWithoutMembersInput
    properties?: PropertyCreateNestedManyWithoutRealtorInput
  }

  export type RealtorUncheckedCreateWithoutRatingsReceivedInput = {
    id?: string
    compant_name: string
    address: string
    broker_BRN: string
    agent_ORN: string
    years_of_experience: string
    specialty?: RealtorCreatespecialtyInput | Enumerable<string>
    role: Agent_type
    language?: RealtorCreatelanguageInput | Enumerable<string>
    description: string
    license_number: string
    broker_card_image?: RealtorCreatebroker_card_imageInput | Enumerable<string>
    image: string
    status?: Status_type
    userId?: string | null
    createdAt?: Date | string
    date_modified?: Date | string
    groups?: GroupUncheckedCreateNestedManyWithoutMembersInput
    properties?: PropertyUncheckedCreateNestedManyWithoutRealtorInput
  }

  export type RealtorCreateOrConnectWithoutRatingsReceivedInput = {
    where: RealtorWhereUniqueInput
    create: XOR<RealtorCreateWithoutRatingsReceivedInput, RealtorUncheckedCreateWithoutRatingsReceivedInput>
  }

  export type UserUpsertWithoutRatingsGivenInput = {
    update: XOR<UserUpdateWithoutRatingsGivenInput, UserUncheckedUpdateWithoutRatingsGivenInput>
    create: XOR<UserCreateWithoutRatingsGivenInput, UserUncheckedCreateWithoutRatingsGivenInput>
  }

  export type UserUpdateWithoutRatingsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUpdateOneWithoutUserNestedInput
    otp?: OtpUpdateManyWithoutUserNestedInput
    realtor?: RealtorUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    type?: EnumList_TypesFieldUpdateOperationsInput | List_Types
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    verifiedEmail?: BoolFieldUpdateOperationsInput | boolean
    verifiedNumber?: BoolFieldUpdateOperationsInput | boolean
    realtorId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    otp?: OtpUncheckedUpdateManyWithoutUserNestedInput
    realtor?: RealtorUncheckedUpdateOneWithoutUserNestedInput
  }

  export type RealtorUpsertWithoutRatingsReceivedInput = {
    update: XOR<RealtorUpdateWithoutRatingsReceivedInput, RealtorUncheckedUpdateWithoutRatingsReceivedInput>
    create: XOR<RealtorCreateWithoutRatingsReceivedInput, RealtorUncheckedCreateWithoutRatingsReceivedInput>
  }

  export type RealtorUpdateWithoutRatingsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRealtorNestedInput
    groups?: GroupUpdateManyWithoutMembersNestedInput
    properties?: PropertyUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateWithoutRatingsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    groups?: GroupUncheckedUpdateManyWithoutMembersNestedInput
    properties?: PropertyUncheckedUpdateManyWithoutRealtorNestedInput
  }

  export type OtpCreateManyUserInput = {
    id?: string
    otp: string
    createdAt?: Date | string
    otp_expiry: Date | string
    date_modified?: Date | string
  }

  export type RatingCreateManyUserInput = {
    id?: string
    value: number
    comment: string
    realtorId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OtpUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyWithoutOtpInput = {
    id?: StringFieldUpdateOperationsInput | string
    otp?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    otp_expiry?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    realtor?: RealtorUpdateOneRequiredWithoutRatingsReceivedNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutRatingsGivenInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyCreateManyRealtorInput = {
    id?: string
    property_title: string
    property_type: PROPERTY_TYPES
    structure: string
    listing_type: string
    style: string
    view: string
    utility_payment: string
    year_built: string
    pets_allowed: string
    available: string
    sale_or_rent_price: string
    price_prefix: string
    payment_frequency: string
    payment_plan: string
    langitude: number
    latitude: number
    country: string
    street_Number: string
    locality: string
    postal_code: string
    logistics: string
    parking_lot: string
    parking_slots: string
    fire_place: string
    entry_floor: string
    room_list: string
    bedroom: string
    bathroom: string
    pool: string
    building_unit: string
    unit_amenities?: PropertyCreateunit_amenitiesInput | Enumerable<string>
    specification: string
    images?: PropertyCreateimagesInput | Enumerable<string>
    video_url: string
    video_url_tour: string
    utilities?: PropertyCreateutilitiesInput | Enumerable<string>
    date_posted: string
    property_price: string
    total_lessee: string
    permit: string
    description: string
    additional_details: string
    additional_facilities_and_amenities: string
    proximate_landmark: string
    createdAt?: Date | string
    date_modified?: Date | string
  }

  export type RatingCreateManyRealtorInput = {
    id?: string
    value: number
    comment: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    realtorId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyUncheckedUpdateManyWithoutPropertiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    property_title?: StringFieldUpdateOperationsInput | string
    property_type?: EnumPROPERTY_TYPESFieldUpdateOperationsInput | PROPERTY_TYPES
    structure?: StringFieldUpdateOperationsInput | string
    listing_type?: StringFieldUpdateOperationsInput | string
    style?: StringFieldUpdateOperationsInput | string
    view?: StringFieldUpdateOperationsInput | string
    utility_payment?: StringFieldUpdateOperationsInput | string
    year_built?: StringFieldUpdateOperationsInput | string
    pets_allowed?: StringFieldUpdateOperationsInput | string
    available?: StringFieldUpdateOperationsInput | string
    sale_or_rent_price?: StringFieldUpdateOperationsInput | string
    price_prefix?: StringFieldUpdateOperationsInput | string
    payment_frequency?: StringFieldUpdateOperationsInput | string
    payment_plan?: StringFieldUpdateOperationsInput | string
    langitude?: FloatFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    street_Number?: StringFieldUpdateOperationsInput | string
    locality?: StringFieldUpdateOperationsInput | string
    postal_code?: StringFieldUpdateOperationsInput | string
    logistics?: StringFieldUpdateOperationsInput | string
    parking_lot?: StringFieldUpdateOperationsInput | string
    parking_slots?: StringFieldUpdateOperationsInput | string
    fire_place?: StringFieldUpdateOperationsInput | string
    entry_floor?: StringFieldUpdateOperationsInput | string
    room_list?: StringFieldUpdateOperationsInput | string
    bedroom?: StringFieldUpdateOperationsInput | string
    bathroom?: StringFieldUpdateOperationsInput | string
    pool?: StringFieldUpdateOperationsInput | string
    building_unit?: StringFieldUpdateOperationsInput | string
    unit_amenities?: PropertyUpdateunit_amenitiesInput | Enumerable<string>
    specification?: StringFieldUpdateOperationsInput | string
    images?: PropertyUpdateimagesInput | Enumerable<string>
    video_url?: StringFieldUpdateOperationsInput | string
    video_url_tour?: StringFieldUpdateOperationsInput | string
    utilities?: PropertyUpdateutilitiesInput | Enumerable<string>
    date_posted?: StringFieldUpdateOperationsInput | string
    property_price?: StringFieldUpdateOperationsInput | string
    total_lessee?: StringFieldUpdateOperationsInput | string
    permit?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    additional_details?: StringFieldUpdateOperationsInput | string
    additional_facilities_and_amenities?: StringFieldUpdateOperationsInput | string
    proximate_landmark?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRatingsGivenNestedInput
  }

  export type RatingUncheckedUpdateWithoutRealtorInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingUncheckedUpdateManyWithoutRatingsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RealtorUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutRealtorNestedInput
    properties?: PropertyUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateWithoutGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
    properties?: PropertyUncheckedUpdateManyWithoutRealtorNestedInput
    ratingsReceived?: RatingUncheckedUpdateManyWithoutRealtorNestedInput
  }

  export type RealtorUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    compant_name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    broker_BRN?: StringFieldUpdateOperationsInput | string
    agent_ORN?: StringFieldUpdateOperationsInput | string
    years_of_experience?: StringFieldUpdateOperationsInput | string
    specialty?: RealtorUpdatespecialtyInput | Enumerable<string>
    role?: EnumAgent_typeFieldUpdateOperationsInput | Agent_type
    language?: RealtorUpdatelanguageInput | Enumerable<string>
    description?: StringFieldUpdateOperationsInput | string
    license_number?: StringFieldUpdateOperationsInput | string
    broker_card_image?: RealtorUpdatebroker_card_imageInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    status?: EnumStatus_typeFieldUpdateOperationsInput | Status_type
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    date_modified?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}