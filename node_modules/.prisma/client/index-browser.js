
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.GroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  realtorId: 'realtorId',
  status: 'status',
  createdAt: 'createdAt',
  date_modified: 'date_modified'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  otp: 'otp',
  createdAt: 'createdAt',
  otp_expiry: 'otp_expiry',
  date_modified: 'date_modified'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  address: 'address',
  image: 'image',
  userId: 'userId',
  createdAt: 'createdAt',
  date_modified: 'date_modified'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  property_title: 'property_title',
  property_type: 'property_type',
  structure: 'structure',
  listing_type: 'listing_type',
  style: 'style',
  view: 'view',
  utility_payment: 'utility_payment',
  year_built: 'year_built',
  pets_allowed: 'pets_allowed',
  available: 'available',
  sale_or_rent_price: 'sale_or_rent_price',
  price_prefix: 'price_prefix',
  payment_frequency: 'payment_frequency',
  payment_plan: 'payment_plan',
  langitude: 'langitude',
  latitude: 'latitude',
  country: 'country',
  street_Number: 'street_Number',
  locality: 'locality',
  postal_code: 'postal_code',
  logistics: 'logistics',
  parking_lot: 'parking_lot',
  parking_slots: 'parking_slots',
  fire_place: 'fire_place',
  entry_floor: 'entry_floor',
  room_list: 'room_list',
  bedroom: 'bedroom',
  bathroom: 'bathroom',
  pool: 'pool',
  building_unit: 'building_unit',
  unit_amenities: 'unit_amenities',
  specification: 'specification',
  images: 'images',
  video_url: 'video_url',
  video_url_tour: 'video_url_tour',
  utilities: 'utilities',
  date_posted: 'date_posted',
  property_price: 'property_price',
  total_lessee: 'total_lessee',
  permit: 'permit',
  description: 'description',
  additional_details: 'additional_details',
  additional_facilities_and_amenities: 'additional_facilities_and_amenities',
  proximate_landmark: 'proximate_landmark',
  realtorId: 'realtorId',
  createdAt: 'createdAt',
  date_modified: 'date_modified'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  value: 'value',
  comment: 'comment',
  userId: 'userId',
  realtorId: 'realtorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RealtorScalarFieldEnum = {
  id: 'id',
  compant_name: 'compant_name',
  address: 'address',
  broker_BRN: 'broker_BRN',
  agent_ORN: 'agent_ORN',
  years_of_experience: 'years_of_experience',
  specialty: 'specialty',
  role: 'role',
  language: 'language',
  description: 'description',
  license_number: 'license_number',
  broker_card_image: 'broker_card_image',
  image: 'image',
  status: 'status',
  userId: 'userId',
  createdAt: 'createdAt',
  date_modified: 'date_modified'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  number: 'number',
  password: 'password',
  type: 'type',
  createdAt: 'createdAt',
  date_modified: 'date_modified',
  verifiedEmail: 'verifiedEmail',
  verifiedNumber: 'verifiedNumber',
  realtorId: 'realtorId'
};
exports.Agent_type = {
  REALTOR: 'REALTOR',
  CO_REALTOR: 'CO_REALTOR'
};

exports.List_Types = {
  USER: 'USER',
  AGENT: 'AGENT',
  ADMIN: 'ADMIN'
};

exports.PROPERTY_TYPES = {
  commercial_Villa: 'commercial_Villa',
  offices: 'offices',
  shops: 'shops',
  apartment: 'apartment',
  villa: 'villa',
  town_House: 'town_House',
  pent_House: 'pent_House',
  select: 'select',
  Apartment_Hotel: 'Apartment_Hotel',
  apartment_Residential: 'apartment_Residential',
  warehouse: 'warehouse',
  showroom: 'showroom',
  bulk_Unit: 'bulk_Unit',
  commercial_Floor: 'commercial_Floor',
  residential_Floor: 'residential_Floor',
  land: 'land'
};

exports.Status_type = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Realtor: 'Realtor',
  Otp: 'Otp',
  Property: 'Property',
  Group: 'Group',
  Rating: 'Rating'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
